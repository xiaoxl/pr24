
## Data cleaning

### Handling Missing Data

- `np.nan`, `pd.NA`
- `pd.isnull()`, `np.isnan()`
- `.dropna()`, `.fillna()`


::: {.callout-note collapse="true"}
# `.dropna()` example

```{python}
import pandas as pd
import numpy as np

data = pd.DataFrame([[1., 6.5, 3.], [1., np.nan, np.nan], 
                     [np.nan, np.nan, np.nan], [np.nan, 6.5, 3.]])
data
```

```{python}
data.dropna()
```


```{python}
data.dropna(how='all')
```


```{python}
data[4] = np.nan
data
```

```{python}
data.dropna(axis=1, how='all')
```
```{python}
data.dropna(thresh=2)
```

:::

::: {.callout-note collapse="true"}
# `.fillna()` example


```{python}
data.fillna(0)
```

```{python}
data.fillna({1: 0.5, 2: -0.1})
```


:::




::: {.callout-note collapse="true"}
# Arithmetic and Data Alignment

Elements of the same index and columns will be computed. By default, if any entry is `nan`, the answer will be `nan`. You may use `fill_value` argument to fill the empty slots. Please see the following example.


```{python}
import pandas as pd
import numpy as np
df1 = pd.DataFrame(np.arange(12.).reshape((3, 4)), columns=list('abcd'))
df2 = pd.DataFrame(np.arange(20.).reshape((4, 5)), columns=list('abcde'))
df2.loc[1, 'b'] = np.nan

df1.add(df2, fill_value=0)
```


Relatedly, when reindexing a Series or DataFrame, you can also specify a `fill_value`.

:::


### Handling duplicates


::: {.callout-note collapse="true"}
# `.drop_duplicates()` example

```{python}
import numpy as np
import pandas as pd

data = pd.DataFrame({'k1': ['one', 'two'] * 3 + ['two'], 
                     'k2': [1, 1, 2, 3, 3, 4, 4]})
data.drop_duplicates(['k1'], keep='last')
```
:::

### Drop data
You may use `.drop()` to drop columns or rows.

1. If you directly apply `.drop()` to an index, that index is considered as a row index.
2. To drop a column, you need to specify the argument `columns=`.
3. There is still the `inplace=` issue.

### String Manipulation

When the column `Series` is of type `str`, all methods in `pd.Series.str` will be applied to each entry of the Series.


::: {.callout-note collapse="true"}
# Some basic examples

```{python}
import pandas as pd
import numpy as np
s = pd.Series(["A ", " B ", "C", "Aaba", " Baca ", np.nan, "CABA", "dog", "cat"])
s
```

```{python}
s.str.lower()
```

```{python}
s.str.split('a')
```

```{python}
s.str.len()
```

```{python}
s.str.strip()
```

```{python}
s.str.replace("A", '1')
```


:::



::: {#exm-}
We could also use `.str` to play with column names and row indexes.

```{python}
import pandas as pd
import numpy as np
df = pd.DataFrame(np.random.randn(3, 2),
                  columns=[" Column A ", " Column B "], index=range(3))

df.columns = df.columns.str.strip().str.lower().str.replace(' ', '_')
df
```
:::

String methods are usually used with regular expressions. For more details please see @sec-re.






<!-- 

- `pd.Series.map()`, `pd.DataFrame.apply()`


::: {#exm-}

```{python}
import pandas as pd
import numpy as np

data = pd.DataFrame({'food': ['bacon', 'pulled pork', 'bacon',
                     'Pastrami', 'corned beef', 'Bacon',
                     'pastrami', 'honey ham', 'nova lox'],
                     'ounces': [4, 3, 12, 6, 7.5, 8, 3, 5, 6]})

meat_to_animal = {
    'bacon': 'pig',
    'pulled pork': 'pig',
    'pastrami': 'cow',
    'corned beef': 'cow',
    'honey ham': 'pig',
    'nova lox': 'salmon'
    }

data['animal'] = data['food'].str.lower().map(meat_to_animal)

data['food'].map(lambda x: meat_to_animal[x.lower()])
```

:::

- `replace`
- `rename` -->
<!-- - `pd.cut(ages, bins)` -->
<!--- `describe`
- `permutation`
- `sample`
- dummy variables -->
