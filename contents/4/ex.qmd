## Exercises
Many problems are based on @Pra2018a.



::: {#exr-}
Let `df` be a `DataFrame`. Please answer the following questions in a Markdown cell.

1. What does `df[0]` do?
2. What does `df[[0]]` do?
3. What does `df[0:1]` do?
:::



::: {#exr-}
Please use the following code to generate a series `ser`, and then finish the following tasks.

```{python}
import pandas as pd
import numpy as np


mylist = list('abcedfghijklmnopqrstuvwxyz')
myarr = np.arange(26)
mydict = dict(zip(mylist, myarr))
ser = pd.Series(mydict)
```

1. Convert the series `ser` into a dataframe `df` with its index as another column on the dataframe.
2. Pick the two columns of `df` and set them into two serieses `ser1` and `ser2`. 
3. Combine two series `ser1` and `ser2` to form a new dataframe `newdf`, and name their columns `ser1` and `ser2`.
:::




::: {#exr-}
Consider two serieses `ser1` and `ser2`. You may use the following `ser1` and `ser2` as an example. The output of each questions below should be a series. You may want to learn the following commands:

- [`np.union1d()`](https://numpy.org/doc/stable/reference/generated/numpy.union1d.html)
- [`np.intersect1d()`](https://numpy.org/doc/stable/reference/generated/numpy.intersect1d.html)
- [`np.isin()`](https://numpy.org/doc/stable/reference/generated/numpy.isin.html)

```{python}
import pandas as pd

ser1 = pd.Series([1, 2, 3, 4, 5])
ser2 = pd.Series([4, 5, 6, 7, 8])
```
1. Find all the elements from `ser1` that are also in `ser2`.
2. Find all the elements from `ser2` that are also in `ser1`.
3. From `ser1` remove items present in `ser2`.
4. Find the union of `ser1` and `ser2`.
5. Find the intersection of `ser1` and `ser2`.
6. Find all the elemetns that are in either `ser1` or `ser2`, but not both.
:::



::: {#exr-}
Consider the following `DataFrame`.

```{python}
import pandas as pd

data = pd.DataFrame(np.arange(16).reshape((4, 4)),
                    index=['Ohio', 'Colorado', 'Utah', 'New York'],
                    columns=['one', 'two', 'three', 'four'])
```

1. Please select the column `two`.
2. Please select the second and the third row.
3. Please find the rows that the column `three` value is bigger than `5`.
4. Please find the last row that the column `three` value is bigger than `5`.
5. Please find the rows that the column `three` value is bigger than `5`, and display the resulted `DataFrame` with only `Colorado` and `Utah` row and `four` and `one` columns, in the specified order.
:::


<!-- 
::: {#exr-}
## Some statistics
Please check the following commands and answer the following questions.

- [`np.percentile()`](https://numpy.org/doc/stable/reference/generated/numpy.percentile.html)

How to get the minimum, 25th percentile, median, 75th, and max of a numeric series? You may use the following Series as an example.

```{python}
import pandas as pd
ser = pd.Series(np.random.normal(10, 5, 25))
```


::: -->



::: {#exr-}
Consider the following `Series`.


```{python}
import pandas as pd
import numpy as np
ser = pd.Series(np.take(list('abcdefgh'), np.random.randint(8, size=30)))
```

1. Please use `pd.Series.value_counts()` to calculte the frequency counts of each unique value of the following Series.
2. Please keep the top 2 most frequent items of `ser` as it is and replace everything else as `Other`.
:::

<!-- 
::: {#exr-}
Please keep the top 2 most frequent items of `ser` as it is and replace everything else as `Other`.

```{python}
import pandas as pd
import numpy as np
ser = pd.Series(np.take(list('abcdefgh'), np.random.randint(8, size=30)))
```
::: -->

<!-- 
::: {#exr-}
Please use `pd.cut` or `pd.qcut` to bin the Series `ser` into 10 equal deciles. You may use the following `ser` as an example.

```{python}
import pandas as pd
ser = pd.Series(np.random.random(20))
```
::: -->


::: {#exr-}
Consider the Series `ser`:

```{python}
import pandas as pd
import numpy as np
ser = pd.Series(np.random.randint(1, 10, 7))
```
Find the positions of numbers that are multiples of 3 from ser.
:::






::: {#exr-}
Compute the mean of `weights` of each `fruit`.
```{python}
import pandas as pd
fruit = pd.Series(np.random.choice(['apple', 'banana', 'carrot'], 10))
weights = pd.Series(np.linspace(1, 10, 10))
df = pd.DataFrame({'fruit': fruit, 'weights': weights})
```
:::


::: {#exr-}
Consider the following DataFrame. 

```{python}
import pandas as pd
df = pd.read_csv('https://raw.githubusercontent.com/selva86/datasets/master/Cars93_miss.csv')
```

1. Check if `df` has any missing values.
2. Please count the number of missing values in each column.
3. Please replace all missing values in `Min.Price` and `Max.Price` with their mean respectively.

<!-- 3. In the original DataFrame, please replace the missing values in `Min.Price` with the column's mean and those in `Max.Price` with the column's median. -->
:::




<!-- 
::: {#exr-}
Replace the spaces in `my_str = 'dbc deb abed gade'` with the least frequent character.
::: -->
<!-- 

::: {#exr-}
Suppress scientific notations like `e-03` in `df` and print up to 4 numbers after decimal.

```{python}
import pandas as pd
import numpy as np
df = pd.DataFrame(np.random.random(4)**10, columns=['random'])
df
```

::: -->

<!-- 
::: {#exr-}
Format the values in column `random` of `df` as percentages.

```{python}
import pandas as pd
import numpy as np
df = pd.DataFrame(np.random.random(4), columns=['random'])
df
```

::: -->

<!-- 
::: {#exr-splitacolumnofadf}
`table3` can be downloaded from [here](assests/datasets/table3.csv). Please use the following code to get the `DataFrame`.

```{python}
import pandas as pd
table3 = pd.read_csv('assests/datasets/table3.csv', index_col='Unnamed: 0')
table3['newrate'] = table3['rate'].str.split('/')
```
Please read cases and populations from the column `newrate` and write them into columns to make the original `table3` tidy.
::: -->


::: {#exr-}
Get the last two rows of `df` whose row sum is greater than 100.

```{python}
import pandas as pd
df = pd.DataFrame(np.random.randint(10, 40, 60).reshape(-1, 4))
```
:::



::: {#exr-}
The groupby object `df_grouped` is given below.
```{python}
import pandas as pd
import numpy as np
df = pd.DataFrame({'fruit': ['apple', 'banana', 'orange'] * 3,
                   'price': np.random.rand(9),
                   'taste': np.random.randint(0, 11, 9)})

df_grouped = df.groupby(['fruit'])
```

1. Get the group belonging to `apple` as a DataFrame.
2. Find the second largest value of `taste` for `banana`.
3. Compute the mean `price` for every `fruit`.
:::


::: {#exr-}

Join `df1` and `df2` by `fruit`/`pazham` and `weight`/`kilo`.
```{python}
df1 = pd.DataFrame({'fruit': ['apple', 'banana', 'orange'] * 3,
                    'weight': ['high', 'medium', 'low'] * 3,
                    'price': np.random.randint(0, 15, 9)})

df2 = pd.DataFrame({'pazham': ['apple', 'orange', 'pine'] * 2,
                    'kilo': ['high', 'low'] * 3,
                    'price': np.random.randint(0, 15, 6)})
```

:::










::: {#exr-}
Consider the following DataFrame.

```{python}
import pandas as pd
import numpy as np
df = pd.read_csv('https://raw.githubusercontent.com/selva86/datasets/master/Cars93_miss.csv', usecols=[0,1,2,3,5])
```

1. Replace `NaN` with string `missing` in columns `Manufacturer`, `Model` and `Type`.
2. Create an index as a combination of these three columns.

:::


::: {#exr-}
Given the following DataFrame.

```{python}
import pandas as pd
df = pd.DataFrame({
    'name': ['James', 'Jane', 'Melissa', 'Ed', 'Neil'],
    'age': [30, 40, 32, 67, 43],
    'score': ['90%', '95%', '100%', '82%', '87%'],
    'age_missing_data': [30, 40, 32, 67, None],
    'income':[100000, 80000, 55000, 62000, 120000]
})
```
- Please use `.map` to create a new column `numeric_score` whose value is the number version of `score`. 
- Please use `.apply` to create a new column `numeric_score` whose value is the number version of `score`. 
:::





::: {#exr-}
The following DataFrame is given.

```{python}
import pandas as pd
df = pd.DataFrame(["STD, City    State",
                   "33, Kolkata    West Bengal",
                   "44, Chennai    Tamil Nadu",
                   "40, Hyderabad    Telengana",
                   "80, Bangalore    Karnataka"],
                   columns=['row'])
```

Please create a new DataFrame out of `df` by spliting it into three columns based on `,` and four spaces. In addition, the column names of the new DataFrame are given by the first row of `df`.
:::