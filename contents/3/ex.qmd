
## Exercises

Many exercises are from [@Pra2018].

::: {#exr-}

1. Create a $3\times3$ matrix with values ranging from 2 to 10.
2. Create a $10\times10$ 2D-array with `1` on the border and `0` inside.
3. Create a 2D array of shape `5x3` to contain random decimal numbers between `5` and `10`.
4. Create a 1D zero `ndarray` of size 10 and update sixth value to 11.
:::


::: {#exr-}
Write a function to reverse a 1d `ndarray` (first element becomes last).
:::



::: {#exr-}
Given `a = np.array([1,2,3])`, please get the desired output `array([1, 1, 1, 2, 2, 2, 3, 3, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3])`. You may use `np.repeat()` and `np.tile()`.
:::


::: {#exr-}
## Compare two `ndarrays`
Consider two `ndarrays` of the same length `x` and `y`. Compare them entry by entry. We would like to know the percentage of the entries that are the same.

Please wrap your code into a function that return the above percentage.
:::





::: {#exr-}
## Manipulate matries
Please finish the following tasks. Let `arr = np.arange(9).reshape(3,3)`.

1. Swap rows `1` and `2` in the array `arr`.
2. Reverse the rows of a 2D array `arr`.
3. Reverse the columns of a 2D array `arr`.
:::



::: {#exr-}
Consider a 2d `ndarray`.

```{python}
arr = np.random.rand(4, 4)
```

1. Please compute the mean of each column.
2. Please compute the sum of each row.
3. Please compute the maximum of the whole array.
:::


::: {#exr-}
## Adding one axis
Please download [this file](assests/img/20220824224849.png).   

1. Please use `matplotlib.pyplot.imread()` to read the file as a 3d `ndarray`. You may need to use `matplotlib` package. It will be introduced later this course. You may go to its [homepage](https://matplotlib.org/stable/users/getting_started/) to install it.
2. Check the shape of the array.
3. Add one additional axis to it as `axis 0` to make it into a 4d `ndarray`. 
:::


::: {#exr-}
## Understanding colored pictures
Please download [this file](assests/img/20220824224849.png) and use `matplotlib.pyplot.imread()` to read the file as a 3d `ndarray`. You may need to use `matplotlib` package. It will be introduced later this course. You may go to its [homepage](https://matplotlib.org/stable/users/getting_started/) to install it.

A colored picture is stored as a 3d `ndarray`. `axis 0` and `axis 1` is about the vertical and horizontal coordinates and can help us to locate a sepecific point in the picture. `axis 2` is an array with `3` elements. It is the color vector which represents the three principal colors: red, green and blue.

1. Find the maximum and minimum of the values in the array.
2. Compute the mean of the three colors at each point to get a 2d `ndarray` where each entry represents the mean of the three colors at each point of the picture.
:::





::: {#exr-}
## Queries

1. Get all items between `5` and `10` from an array `a = np.array([2, 6, 1, 9, 10, 3, 27])`.
2. Consider `x = np.array([1, 2, 1, 1, 3, 4, 3, 1, 1, 2, 1, 1, 2])`. Please find the index of 5th repetition of number `1` in `x`.
:::


::: {#exr-}
Use the following code to get the dataset `iris` and three related `np.array`: `iris_1d`, `iris_2d` and `sepallength`. 

```{python}
import numpy as np

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
iris_1d = np.genfromtxt(url, delimiter=',', dtype=None, encoding=None)
iris_2d = np.genfromtxt(url, delimiter=',', dtype='float', encoding=None,
                        usecols=[0, 1, 2, 3])
iris_2d[np.random.randint(150, size=20), np.random.randint(4, size=20)] = np.nan
sepallength = np.genfromtxt(url, delimiter=',', dtype='float', usecols=[0],
                            encoding=None)
```

1. `iris_1d` is a 1D numpy array that each item is a tuple. Please construct a new 1D numpy array that each item is the last componenet of each tuple in `iris_1d`.

2. Convert `iris_1d` into a 2D array `iris_2d` by omitting the last field of each item.
3. `np.isnan()` is a function to check whether each entry of a `ndarray` is `nan` or not. Please use `np.isnan()` as well as `np.where()` to find all `nan` entries in `iris_2d`. 
4. Select the rows of `iris_2d` that does not have any `nan` value.
5. Replace all `nan` with `0` in `iris_2d`.
:::






::: {#exr-}
## Random
Please finish the following tasks. 

1. Use the package `np.random` to flip a coin 100 times and record the result in a 1d `ndarray` `coin`.
2. Assume that the coin is not fair, and the probability to get `H` is `p`. Write a code to flip the coin 100 times and record the result in a list `coin`, with a given parameter `p`. You may use `p=.4` as the first choice.
3. For each list `coin` created above, write a code to find the longest `H` streak. We only need the biggest number of consecutive `H` we get during this 100 tosses. It is NOT necessary to know when we start the streak.
4. Please write functions to perform the above operations.
:::




::: {#exr-}
## Bins
Please read the [document of `np.digitize()`](https://numpy.org/doc/stable/reference/generated/numpy.digitize.html#numpy-digitize), and use it to do the following task.

Set the following bins:

- Less than or equal to `3`: `small`
- Bigger than `3` but less than or equal to `5`: `medium`
- Bigger than `5`: `large`

Please transform the following data `iris_2c` into texts using the given bins.

```{python}
import numpy as np
url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
iris_2c = np.genfromtxt(url, delimiter=',', dtype='object')[:, 2].astype('float')
```
:::



::: {#exr-}
Consider a 2d `ndarray` `a`. 

```{python}
import numpy as np
a = np.random.rand(5, 5)
```

1. Please sort it along the 3rd column.
2. Please sort it along the 2nd row.

You may use `np.argsort()` for the problem.
:::



::: {#exr-}
## One-hot vector
Compute the one-hot encodings of a given array. You may use the following array as a test example. In this example, there are `3` labels. So the one-hot vectors are 3 dimensional vectors.

For more infomation about one-hot encodings, you may check the [Wiki page](https://en.wikipedia.org/wiki/One-hot#Machine_learning_and_statistics). You are not allowed to use packages that can directly compute the one-hot encodings for this problem. 

```{python}
import numpy as np
arr = np.random.randint(1,4, size=6)
```

:::



::: {#exr-}
Consider `arr = np.arange(8)`. A stride of `arr` with a window length of `4` and strides of `2` is a 2d `ndarray` that looks like:

```{python}
#| echo: false
arr = np.arange(8)
np.array([arr[i:i+4] for i in range(0, 8, 2) if i+4<=8])
```

Please write a function that takes `arr` and `length` and `strides` as inputs, and its stride as outputs.
:::