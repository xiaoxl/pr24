## Exercieses

Problems are based on @Swe2020.

::: {#exr-}
## Heron's formula
Consider a triangle whose sides are $a$, $b$ and $c$. Heron's formula states that the area of this triangle is 
$$\sqrt{s(s−a)(s−b)(s−c)}\quad\text{ where } s=\frac12(a+b+c).$$

Please write a function that given three points computes the area of the triangle with vertices being the given points. The input is required to be a `list` of three `tuple`s, where each `tuple` contains two numbers representing the 2d-coordinate of a point.
:::



::: {#exr-}
## array
Write a function to reverse an 1D NumPy array (first element becomes last).
:::




::: {#exr-}
## Compare two `numpy` arraies
Consider two `numpy` arraies `x` and `y`. Compare them entry by entry. We would like to know how many are the same.

Write a function that the inputs are `x` and `y`, and the output is the number of the same numbers.
:::






::: {#exr-}
## Comma Code
Say you have a list value like this: `spam = ['apples', 'bananas', 'tofu', 'cats']`. 

Write a function that takes a list value as an argument and returns a string with all the items separated by a comma and a space, with `and` inserted before the last item. For example, passing the previous `spam` list to the function would return 'apples, bananas, tofu, and cats'. But your function should be able to work with any list value passed to it. Be sure to test the case where an empty list `[]` is passed to your function.
:::




::: {#exr-}
Create a Car class with two instance attributes:

1. `.color`, which stores the name of the car’s color as a string.
2. `.mileage`, which stores the number of miles on the car as an integer.

Then instantiate two Car objects — a blue car with 20,000 miles and a red car with 30,000 miles — and print out their colors and mileage. Your expected output are below:

```{python}
#| echo: false
class mycar():
    def __init__(self, color=None, mileage=None):
        self.color = color
        self.mileage = mileage
    
    def __str__(self):
        return 'A {} car with {} mileage.'.format(self.color, self.mileage)
```

```{python}
car1 = mycar(color='blue', mileage=20000)
car2 = mycar(color='red', mileage=30000)

print(car1)
print(car2)
```


:::



::: {#exr-}
Create a `GoldenRetriever` class that inherits from the `Dog` class. Give the `sound` argument of `GoldenRetriever.speak()` a default value of `Bark`. Use the following code for your parent `Dog` class:

```{python}
class Dog:
    species = "Canis familiaris"

    def __init__(self, name, age):
        self.name = name
        self.age = age

    def __str__(self):
        return f"{self.name} is {self.age} years old"

    def speak(self, sound):
        return f"{self.name} says {sound}"
```

:::