
## Exercises
Most problems are based on @Sha2017, @You2020, @Swe2020, @McK2017 and @Klo2021.


::: {#exr-}
## Indentation
Please tell the differences between the following codes. Write your answers in the Markdown cells.

```{python}
#| eval: false

for i in range(5):
    print('Hello world!')
print('Hello world!')
```

```{python}
#| eval: false

for i in range(5):
    print('Hello world!')
    print('Hello world!')
```

```{python}
#| eval: false

for i in range(5):
print('Hello world!')
print('Hello world!')
```

```{python}
#| eval: false

for i in range(5):
    pass
print('Hello world!')
print('Hello world!')
```
:::




::: {#exr-}
## Play with built-in data types

Please first guess the results of all expressions below, and then run them to check your answers.
```{python}
#| eval: false
True and True
True or True
False and True
(1+1>2) or (1-1<1)
```
:::



::: {#exr-}
## `==` vs `is`
Please explain what happens below.

```{python}
a = 1
b = 1.0
type(a)
```

```{python}
type(b)
```

```{python}
a == b
```

```{python}
a is b
```

:::


::: {#exr-}
## Play with strings

1. Please use `.format()` to generate the following sentences.

```{python}
#| eval: false
"The answer to this question is 1. If you got 2, you are wrong."
"The answer to this question is 2. If you got x, you are wrong."
"The answer to this question is True. If you got 23, you are wrong."
"The answer to this question is 4. If you got 32, you are wrong."
```

2. Please use `.format()` and `for` loop to generate the following sentence and replace the number `1` inside with all positive odd numbers under `10`.
```{python}
#| eval: false
"I like 1 most among all numbers."
```

:::




::: {#exr-}
# Toss a coin

1. Please write a function `tossacoin()` to simulate tossing a coin. The output is `H` or `T`, and each call of the function has a 50/50 chance of getting `H` or `T`. Please use the following code to get a random number between `0` and `1`.

```{python}
#| eval: false
import numpy as np
np.random.rand()
```

2. Please simulate tossing a coin 20 times, and print out the results.
3. The coin might be uneven. In this case the probability to get `H` is no longer `0.5`. We would like to use an argument `p` to represent the probability of getting `H`. Please upgrade your function `tossacoin()` to be compatible with uneven coins. Then please simulate tossing a coin  (with `p=0.1`, for example) 20 times, and print out the results.
4. Tossing a coin 100 times, and record the results in a `list`.

:::



::: {#exr-}
## `split` and `join`

1. Please get the list of words `wordlist` of the following sentence.

```{python}
#| eval: false
sentence = 'This is an example of a sentence that I expect you to split.'
```
2. Please combine the `wordlist` gotten from part 1 to get a string `newsentence`, where all spaces are replaced by `\n`.

:::


::: {#exr-}
## List reference

Please finish the following tasks.

1. Given the list `a`, make a new reference `b` to `a`. Update the first entry in `b` to be `0`. What happened to the first entry in `a`? Explain your answer in a text block.

2. Given the list `a`, make a new copy `b` of the list `a` using the function `list`. Update the first entry in `b` to be `0`. What happened to the first entry in `a`? Explain your answer in a text block. 
:::



::: {#exr-}
Please tell the differences of the following objects.

1. `[1, 2, 3, 4, 5, 6]`
2. `[[1, 2], [3, 4], [5, 6]]`
3. `{1: 2, 3: 4, 5: 6}`
4. `{1: [2], 3: [4], 5: [6]}`
5. `[{1: 2}, {3: 4}, {5: 6}]`
:::


::: {#exr-}
## List comprehension

1. Given a list of numbers, use list comprehension to remove all odd numbers from the list:
```{python}
numbers = [3,5,45,97,32,22,10,19,39,43]
```
2. Use list comprehension to find all of the numbers from 1-1000 that are divisible by 7.
3. Use list comprehension to get the index and the value as a tuple for items in the list `['hi', 4, 8.99, 'apple', ('t,b', 'n')]`. Result would look like `[(index, value), (index, value), ...]`.
4. Use list comprehension to find the common numbers in two lists (without using a tuple or set) `list_a = [1, 2, 3, 4]`, `list_b = [2, 3, 4, 5]`.
:::


::: {#exr-}

1. Given a string, use list comprehension to count the number of spaces in it.
2. Write a function that counts the number of spaces in a string.
:::

::: {#exr-}
## Probability
Compute the probability that two people out of 23 share the same birthday. The math formula for this is 
$$1-\frac{365!/(365-23)!}{365^{23}}=1-\frac{365}{365}\cdot\frac{365-1}{365}\cdot\frac{365-2}{365}\cdot\ldots\cdot\frac{365-22}{365}.$$

1. To directly use the formula we have to use a high performance math package, e.g. `math`. Please use `math.factorial()` to compute the left hand side of the above formula. You should `import math` to use the function since it is in the `math` package.

2. Please use the right hand side of the above formula to compute the probability using the following steps.
    a. Please use the list comprehension to create a list $\left[\frac{365}{365},\frac{365-1}{365},\frac{365-2}{365},\ldots,\frac{365-22}{365}\right]$. 
    b. Use `math.prod()` to compute the product of elements of the above list. You should `import math` to use the function since it is in the `math` package.
    c. Compute the probability by finishing the formula.

3. Please use `time` to test which method mentioned above is faster.
:::



::: {#exr-}
## Determine the indefinite article
Please finish the following tasks.

1. Please construct a list `aeiou` that contains all vowels.
2. Given a word `word`, we would like to find the indefinite article `article` before `word`. (Hint: the article should be `an` if the first character of `word` is a vowel, and `a` if not.)
:::
<details>
<summary> Click for Hint.</summary>
::: {.solution}
Consider `in`, `.lower()` and `if` structure.
:::
</details>



::: {#exr-}
## File names

1. Please use Python code to generate the following list of file names: `file0.txt`, `file1.txt`, `file2.txt`, ... `file9.txt`. 
2. Please use Python code to generate the following list of file names: `file0.txt`, `file1.txt`, `file2.txt`, ... `file10.txt`, `file11.txt`, ..., `file99.txt`, `file100.txt`. 
3. Please use Python code to generate the following list of file names: `file000.txt`, `file001.txt`, `file002.txt`, ... `file100.txt`. You may consider `.zfill()` to fill the zeros.
:::

::: {#exr-}
## Datetime and files names
We would like to write a program to quickly generate many files. (For example, we want to take random samples multiple times and we want to keep all our samples. Another example is to generate AI pictures.) Every time we run the code, many files will be generated. We hope to store all files generated and organize them in a neat way. To achieve this, one way is to create a subfolder for each run and store all files generated during that run in the particular subfolder. Since we would like to make it fast, the real point of this task is to find a way to automatically generate the filenames for the files generated and the folder names for the subfolders generated. 

One way to automatically generate file names and folder names is to use the date and the time when the code is run. Please check `datetime` package for getting and formatting date/time, and `os` packages for playing with files and folders. Here are some suggested steps.

1. Use `datetime` packages to get the current date and time. You may read [this article](https://docs.python.org/3/library/datetime.html) to learn how to use `datetime` package.
2. Use the current date and time to form two strings `currentdate` and `currenttime`.
3. Assume that we would like to generate 100 files. Then please generate a list of strings that each one is string that represents a path with folder `currentdate`, subfolder `currenttime` and file name `X.txt` where `X` is a number from `0` to `99`.
:::
<details>
<summary>Click for Hint.</summary>
You may try `datetime.datetime.now()` and `.strftime()` method for the `datetime` object.
</details>




::: {#exr-}
## Caesar cipher
In cryptography, a *Caesar cipher* is one of the simplest and most widely known encryption techniques. It is a type of substitution cipher in which each letter in the plaintext is replaced by a letter some fixed number of positions down the alphabet. For example, with a left shift of 3, `D` would be replaced by `A`, `E` would become `B`, and so on. The method is named after Julius Caesar, who used it in his private correspondence.

Please write two functions to implement Caesar cipher and decipher. To make things easier, we implement the following two rules.

1. Spaces, `,`, numbers or other non-alphabic letters will NOT be changed.
2. Upper case and lower case will NOT be changed.

Note that you may add the number of shifts as a parameter in your function.
:::



::: {#exr-}
## `sorted`
Please read through the Key Funtions section in this [article](https://docs.python.org/3/howto/sorting.html#key-functions), and sort the following two lists.

1. Sort `list1 = [[11,2,3], [2, 3, 1], [5,-1, 2], [2, 3,-8]]` according to the sum of each list.

2. Sort `list2 = [{'a': 1, 'b': 2}, {'a': 3, 'b': 4},{'a': 5, 'b': 2}]` according to the `b` value of each dictionary.
:::




::: {#exr-fantasyinventorycode}
## Fantasy Game Inventory

You are creating a fantasy video game. The data structure to model the playerâ€™s inventory will be a dictionary where the keys are string values describing the item in the inventory and the value is an integer value detailing how many of that item the player has. For example, the dictionary value `{'rope': 1, 'torch': 6, 'gold coin': 42, 'dagger': 1, 'arrow': 12}` means the player has 1 rope, 6 torches, 42 gold coins, and so on.

1. Write some code to take any possible `inventory` and display it like the following. Note that the order of items doesn't matter. The purpose of this exercise is to read information from a `dict` and translate it into a format you need.

```{python}
#| eval: false
Inventory:
12 arrow
42 gold coin
1 rope
6 torch
1 dagger
Total number of items: 62
```
2. Write a function named `displayInventory()` that would take any possible `inventory` and display it in the above way.
:::



::: {#exr-ndoormontyhall}
# `N`-door Monty Hall problem
Please finish the function `MontyHall()` for the `N`-door Monty Hall problem described in @sec-ndoormh.
:::

