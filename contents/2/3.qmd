

## Flows and Functions

### `for` loop
A `for` loop is used for iterating over an *iterator*. Iterators can be gotten from lists, tuples, strings, etc.. The basic syntax of a `for` loop is as follows.

```{python}
#| eval: false
for i in aniterator:
    do thing
```
In each iteration, the `aniterator` will produce a value and assign it to `i`. Then the code in the `for` loop will run with `i` being assigned to the specific value. 

Let's look at some typical examples of iterators.

::: {.callout-note collapse="true"}
# `range()`
`range(N)` is an iterator which will produce integers from `0` to `N-1`. This is the most basic way to use `for` loop that you may treat `i` as the index of an iteration. Note that similar to the list index rule (which will be discussed later), the right end point `N` is not included.

```{python}
for i in range(3):
    print(i)
```
There are two more versions of `range()`:

- `range(M, N)` can generate integers from `M` to `N-1`.
- `range(M, N, s)` can generate integers from `M` to `N-1`, with the step size `s`.
Similarly, in both cases, the right end point `N` is not included.

```{python}
for i in range(1, 3):
    print(i)
```

```{python}
for i in range(1, 5, 2):
    print(i)
```
:::


::: {.callout-note collapse="true"}
# Strings
You may use a string as an iterator. It will go through the string and generate the letter in it one by one from the beginning to the end. Note that escaped letters will be captured. Please see the following example.

```{python}
s = 'abc\"'
for i in s:
    print(i)
```
:::


::: {.callout-note collapse="true"}
# Lists
We will talk about lists in details in next section. We will briefly mention it here since lists are the most common iterators in Python. Roughly speaking, a list is an ordered sequence of Python objects. As an iterator, it just goes through the sequence and generates the object in it one by one from the beginning to the end. Please see the following example.

```{python}
s = [1, 'a', -3.1, 'abc']
for i in s:
    print(i)
```

:::


::: {.callout-tip collapse="true"}
# `zip()`
The "Pythonic way" to write loops is to NOT use indexes. In this case how do we loop through two iterators if no indexes are used? We could use `zip()`.

`zip()` is used to "zip" two iterators together to form one. Then we can use the zipped one for the loop and elements from both iterators are zipped into tuples. Please see the following examples.

```{python}
a = [1, 2, 3]
b = ['a', 'b', 'c']
for item in zip(a, b):
    print(item)
```

```{python}
c = range(3)
d = 'abc'
for item in zip(c, d):
    print(item)
```

:::


### `if` statement
The `if` statement is straightforword. Here is a typical example.

```{python}
x = -1

if x < 0:
    x = 0
    print('Negative changed to zero')
elif x == 0:
    print('Zero')
elif x == 1:
    print('Single')
else:
    print('More')
```
There can be zero or more `elif` parts, and the `else` part is optional.

### Functions

Functions are declared with the `def` keyword and returned from the `return` keyword. Here is a typical example of a function.

```{python}
def my_function(x, y, z=1.5):
    if z > 1:
        return z * (x + y)
    else:
        return z / (x + y)
```

Each function can have *positional* arguments and *keyword* arguments. 

- `z=1.5` in above example means that the default value for `z` is `1.5`. Keyword arguments are most commonly used to specify default values.
- If no keywords are given, all arguments will be recognized by the positions.
- If both positional arguments and keyword arguments are given, positional arguments have to be in front. 
- The order of keyword arguments are not important.


::: {.callout-note}
Although there are global variable, it is always ecouraged to use local variables only. This means that the variables in and out of a function (as well as classes that we will talk about later) are not the same, even if they have the same name.
:::




::: {.callout-note collapse="true"}
## Lambda function
*lambda* function is a way of writing functions consisting of a single statment. The format is `lambda x: output of x`. 

Please see the following examples.

```{python}
f = lambda x: 2*x+1

f(3)
```

```{python}
def apply_to_list(some_list, f):
    return [f(x) for x in some_list]

ints = [4, 0, 1, 5, 6]
apply_to_list(ints, lambda x: x * 2)
```

To fully understand the following example requires knowledge from @sec-dict.
```{python}
fruits = {'banana': 3, 'apple': 4, 'pear': 1, 'orange': 2}

fruits_sorted = sorted(fruits.items(), key=lambda x: x[1])
fruits_sorted
```


Lambda function is always used as a input parameter when it is not worth to use extra space to write a one line function. You will see several examples in the Chapter of `pandas`.

:::





::: {.callout-caution collapse="true"}
## This is a tricky but not very rare case: mutable objects as default values.
It is highly recommended NOT to set any mutatable objects as the default value of an input of a function. The reason is that this default object is initialized when the function is defined, not when the function is called. Then all function calls will share the same default object.

A typical example is an empty list. If you use an empty list as the defaul value, that list will be passed to the next function call, which is no longer empty. Please see the following example.

```{python}
def add(x=[]):
    x.append(1)
    return x

add()
```

```{python}
add()
```
```{python}
add()
```
Every time the function is called with no arguments, the default value is used, which is the same list initialized at the beginning. The list at the begining is an empty list. But after we put things inside, it is no longer empty.

If you want to set a mutable object as a default, the way is as follows:

```{python}
def add(x=None):
    if x is None:
        x = list()
    x.append(1)
    return x

add()
```

```{python}
add()
```

```{python}
add()
```


:::
