## Examples

### Monty Hall problem


The Monty Hall problem is a brain teaser, in the form of a probability puzzle, loosely based on the American television game show *Let's Make a Deal* and named after its original host, Monty Hall. The problem is stated as follows:

Suppose you're on a game show, and you're given the choice of three doors: Behind one door is a car; behind the others, goats. You pick a door, say No. 1, and the host, who knows what's behind the doors, opens another door, say No. 3, which has a goat. He then says to you, "Do you want to pick door No. 2?" Is it to your advantage to switch your choice?

Here is a YouTube video of the Monty Hall problem.

{{< video https://youtu.be/4Lb-6rxZxx0 >}}


We would like to use code to simulate this process. Here are the steps. 


::: {.callout-note collapse="true"}
## Setup
We use `1`, `2`, `3` to denote the three doors. We could put it in a list `doors = [1, 2, 3]`. Later after the game, we may record our result. There are only two possibilites: remains with the initial choice wins or switch to the new choice wins. We may record the result in a dictionary `results={'remain': 0, 'switch': 0}`, and update the corresponding key after one game.

```{python}
doors = [1, 2, 3]
results = {'remain': 0, 'switch': 0}
```

:::


::: {.callout-note collapse='true'}
## 1. Put the car behind a door.
We randomly pick one door and put the car behind it. 

"Randomly pick" can be done by `random.choice()`. What it does is to take a sample chosen from the list. In our case, we would like to take a sample from `doors`. Therefore we want to use `random.choice(doors)`. The output is the door we randomly pick to put the car. So we set it to a variable `door_with_car` to remind us.


```{python}
import random
door_with_car = random.choice(doors)
```

This is a function in the package `random`. So to use it you should first `import random`. You may get more information from [the official document](https://docs.python.org/3/library/random.html#random.choice). 

:::


::: {.callout-note collapse="true"}
## 2. Make the initial choice.
We make our initial choice. We could also randomly pick one door as our initial choice. The code is similar to the previous one. 

```{python}
initial_choice = random.choice(doors)
```
:::


::: {.callout-note collapse="true"}
## 3. The host opens another door.
Based on the door with car and our inital choice, the host chooses a door without car to open. This door is denoted by `door_host_open`.

There are two possibility here:

- If we haapen to pick the door with car, the host will randomly open one of the other two doors, since neither of them has car inside. In other words, we remove `door_with_car` from `doors`, and randomly pick one from the rest.
- If we didn't pick the door with car, the car is in one of the other two doors, and the host has to open the other door. In other words, this door is the door that is neither `door_with_car` nor `initial_choice`.

The above analysis can be translated directly into the following code.

```{python}
rest_doors = doors[:]
if door_with_car == initial_choice:
    rest_doors.remove(door_with_car)
    door_host_open = random.choice(rest_doors)
elif door_with_car != initial_choice:
    rest_doors.remove(door_with_car)
    rest_doors.remove(initial_choice)
    door_host_open = random.choice(rest_doors)
```
Note that in this part, we directly remove elements from `doors`. Since we don't want to alter the original variable `doors`, and also `.remove()` works in-place, we make a copy of `doors` and call it `rest_doors` for us to remove doors. 

The code `[:]` is used to make copies of list. This may be the fastest way to copy plain `list` in Python.
:::


::: {.callout-note collapse="true"}
## 4. Check the result.
After the host opens `door_host_open`, two doors are left: our initial choice and the door unopened. The door unopened is actually the door that is neither our initial choice or the door host opens. It is the only element in `tmpdoors` after removing `initial_choice` and `door_host_open`. So we could directly get it by calling index `0`. The code is as follows. Note that we make another copy of `doors` at the beginning due to the same reason as the previous step.

```{python}
tmpdoors = doors[:]
tmpdoors.remove(door_host_open)
tmpdoors.remove(initial_choice)
door_unopened = tmpdoors[0]
```
Then we could start the check the result. 

- If `door_with_car` equals `initial_choice`, remaining with the initial choice wins. 
- If `door_with_car` equals `door_unopened`, switching to the new door wins.
We could update the result dictionary accordingly.

```{python}
if door_with_car == initial_choice:
    winner = 'remain'
elif door_with_car == door_unopened:
    winner = 'switch'

results[winner] = results[winner] + 1
```
:::



::: {.callout-note collapse="true"}
## Put things together
We now put the above steps together.

```{python}
import random
doors = [1, 2, 3]
results = {'remain': 0, 'switch': 0}

door_with_car = random.choice(doors)
initial_choice = random.choice(doors)

rest_doors = doors[:]
if door_with_car == initial_choice:
    rest_doors.remove(door_with_car)
    door_host_open = random.choice(rest_doors)
elif door_with_car != initial_choice:
    rest_doors.remove(door_with_car)
    rest_doors.remove(initial_choice)
    door_host_open = random.choice(rest_doors)

tmpdoors = doors[:]
tmpdoors.remove(door_host_open)
tmpdoors.remove(initial_choice)
door_unopened = tmpdoors[0]

if door_with_car == initial_choice:
    winner = 'remain'
elif door_with_car == door_unopened:
    winner = 'switch'

results[winner] = results[winner] + 1
```
The code can be simplified in multiple ways. However here I would like to show how to translate something directly into codes. So I will just keep it as it is.
:::


::: {.callout-note collapse="true"}
## Wrapped in a function
The above game process can be wrapped in a function.

```{python}
import random

def MontyHall():
    doors = [1, 2, 3]

    door_with_car = random.choice(doors)
    initial_choice = random.choice(doors)

    rest_doors = doors[:]
    if door_with_car == initial_choice:
        rest_doors.remove(door_with_car)
        door_host_open = random.choice(rest_doors)
    elif door_with_car != initial_choice:
        rest_doors.remove(door_with_car)
        rest_doors.remove(initial_choice)
        door_host_open = random.choice(rest_doors)

    tmpdoors = doors[:]
    tmpdoors.remove(door_host_open)
    tmpdoors.remove(initial_choice)
    door_unopened = tmpdoors[0]

    if door_with_car == initial_choice:
        winner = 'remain'
    elif door_with_car == door_unopened:
        winner = 'switch'
    return winner
```
:::

Now we may play the game by calling the function `MontyHall()`. The return value is the winner, which can be used to update `results`.

```{python}
results = {'remain': 0, 'switch': 0}
winner = MontyHall()
results[winner] = results[winner] + 1
```
Then we may play the game multiple times, and see which strategy wins more. The following is the result of 100 games.

```{python}
results = {'remain': 0, 'switch': 0}

for i in range(100):
    winner = MontyHall()
    results[winner] = results[winner] + 1

results
```
From this result, you may guess that switch might be the better strategy.


### `N`-door Monty Hall problem {#sec-ndoormh}


The Monty Hall problem can be modified to `N` doors. The host will open `N-2` doors which don't have the car behind, and only leave one door left for us to choose. What will you choose?

We only need to modify our codes a little bit for the change. You may bring the idea "there are `N` doors" to the process mentioned above to see what should be modified. However when writing the code, you may still set `N=3` and change it later after you finish.

::: {.callout-note collapse="true"}
## 1. Change `doors`
<!-- The initial setup for `doors` becomes `list(range(1, N+1))`. -->

```{python}
#| echo: false
N = 3
doors = list(range(1, N+1))
```
:::


::: {.callout-note collapse="true"}
## 2. The host opens multiple doors
<!-- The major change is that now the host has to open `N-2` to only leave one unopened door for us. In other words, during Step 3, we need to take a length `N-2` sample for the host to open. 

Using the package `random`, to take a length `N-2` sample, we could use the function `random.sample(L, N-2)`. Please go to [the official document](https://docs.python.org/3/library/random.html#random.sample) for more information. -->

```{python}
#| echo: false
rest_doors = doors[:]
if door_with_car == initial_choice:
    rest_doors.remove(door_with_car)
    door_host_open = random.sample(rest_doors, N-2)
elif door_with_car != initial_choice:
    rest_doors.remove(door_with_car)
    rest_doors.remove(initial_choice)
    door_host_open = random.sample(rest_doors, N-2)
```
<!-- Note that the logic of the last line is similar to `N=3` case. The host has to open `N-2` doors that are neither `door_with_car` nor `initial_choice`. If the two doors are different, the host has to open all the rest doors. That's why `door_host_open = rest_doors`. -->

:::


::: {.callout-note collapse="true"}
## 3. Remove multiple `door_host_open`
<!-- Because now the host opens more than 1 door, `door_host_open` is now a list, which contains all the doors opened by the host. Then in Step 4 when we remove `door_host_open`, we have to run a `for` loop to remove those doors one by one. -->

```{python}
#| echo: false
tmpdoors = doors[:]
tmpdoors.remove(initial_choice)
for door in tmpdoors:
    tmpdoors.remove(door)
door_unopened = tmpdoors[0]
```

<!-- Then the codes are  -->
:::


::: {.callout-note collapse="true"}
## Put things together
<!-- Here is the updated function. -->

```{python}
#| echo: false
import random

def MontyHall(N=3):
    doors = list(range(1, N+1))

    door_with_car = random.choice(doors)
    initial_choice = random.choice(doors)

    rest_doors = doors[:]
    if door_with_car == initial_choice:
        rest_doors.remove(door_with_car)
        door_host_open = random.sample(rest_doors, N-2)
    elif door_with_car != initial_choice:
        rest_doors.remove(door_with_car)
        rest_doors.remove(initial_choice)
        door_host_open = random.sample(rest_doors, N-2)

    tmpdoors = doors[:]
    tmpdoors.remove(initial_choice)
    for door in door_host_open:
        tmpdoors.remove(door)
    door_unopened = tmpdoors[0]

    if door_with_car == initial_choice:
        winner = 'remain'
    elif door_with_car == door_unopened:
        winner = 'switch'
    return winner
```
<!-- Note that we set the default value of `N` is `3`. So if we call `MontyHall()` it will run the `3`-door version.  -->
:::

Now we can start to play the game. We may test our code by using the default `N` which is `3`.

```{python}
# | eval: false
results = {'remain': 0, 'switch': 0}

for i in range(100):
    winner = MontyHall()
    results[winner] = results[winner] + 1

results
```

```
{'remain': 34, 'switch': 66}
```

You will see that we get a similar result as our previous version.

Now we will try `10`-door version.
```{python}
#| eval: false
results = {'remain': 0, 'switch': 0}

for i in range(100):
    winner = MontyHall(10)
    results[winner] = results[winner] + 1

results
```

```
{'remain': 9, 'switch': 91}
```

The result also shows that switch is a better strategy. This is the simulation approach for this classic problem. You may compare it with theorical calculations using Probability theory.




### Color the Gnomic data

We can use ASCII color codes in the string to change the color of strings. As an example, `\033[91m` is for red and `\033[94m` is for blue. See the following example.
```{python}
#| eval: false
print('\033[91m'+'red'+'\033[92m'+'green'+'\033[94m'+'blue'+'\033[93m'+'yellow')
```
This example works in IPython console or Jupyter notebook. 


Consider an (incomplete) Gnomic data given below which is represented by a long sequence of `A`, `C`, `T` and `G`. Please color it using ASCII color codes.
```{python}
gnomicdata = 'TCGATCTCTTGTAGATCTGTTCTCTAAACGAACTTTAAAATCTGTGTGGCTGTCACTCGG'\
             'CTGCATGCTTAGTGCACTCACGCAGTATAATTAATAACTAATTACTGTCGTTGACAGGAC'\
             'ACGAGTAACTCGTCTATCTTCTGCAGGCTGCTTACGGTTTCGTCCGTGTTGCAGCCGATC'\
             'ATCAGCACATCTAGGTTTTGTCCGGGTGTGACCGAAAGGTAAGATGGAGAGCCTTGTCCC'\
             'TGGTTTCAACGAGAAAACACACGTCCAACTCAGTTTGCCTGTTTTACAGGTTCGCGACGT'\
             'GCTCGTACGTGGCTTTGGAGACTCCGTGGAGGAGGTCTTATCAGAGGCACGTCAACATCT'\
             'TAAAGATGGCACTTGTGGCTTAGTAGAAGTTGAAAAAGGCGTTTTGCCTCAACTTGAACA'\
             'GCCCTATGTGTTCATCAAACGTTCGGATGCTCGAACTGCACCTCATGGTCATGTTATGGT'\
             'TGAGCTGGTAGCAGAACTCGAAGGCATTCAGTACGGTCGTAGTGGTGAGACACTTGGTGT'\
             'CCTTGTCCCTCATGTGGGCGAAATACCAGTGGCTTACCGCAAGGTTCTTCTTCGTAAGAA'\
             'CGGTAATAAAGGAGCTGGTGGCCATAGTTACGGCGCCGATCTAAAGTCATTTGACTTAGG'\
             'CGACGAGCTTGGCACTGATCCTTATGAAGATTTTCAAGAAAACTGGAACACTAAACATAG'
```


The way to color `A` as a red `A` is to change the character into `\033[91mA`. Then using in IPython console or Jupyter notebook after you print it, you can see a red `A`. Therefore the core idea to solve this problem is to replace `A` in the string by `\033[91mA`, etc..

There are multiple ways to implement this idea.

::: {.callout-note collapse="true"}
## `if-elif-else`
We loop through the whole string. Every time when we get an `A`, we replace it with `\033[91mA`. The same applies to `C`, `T` and `G`.

To implement this idea, we actually make another list `newlist`. Every time we read `A` from `gnomicdata`, we add `033[91mA` to the `newlist`. Then at the end we could combine all strings in `newlist` to get the string we need.

Here is the code.

```{python}
newlist = []
for letter in gnomicdata:
    if letter == 'A':
        newlist.append('\033[91mA')
    elif letter == 'C':
        newlist.append('\033[92mC')
    elif letter == 'T':
        newlist.append('\033[93mT')
    elif letter == 'G':
        newlist.append('\033[94mG')
gnomicstring = ''.join(newlist)
```
:::

::: {.callout-note collapse="true"}
## Upgrade using `dict`
In the previous method, the big `if...elif...` doesn't look very good. We could use `dict` to simplify the code.

The key idea of the `if...elif...` statement is to make a relation between `A` and `\033[91mA`, etc.. This is exactly what a `dict` can do.

Here is the sample code.
```{python}
color_pattern = {
    'A': '\033[91mA',
    'C': '\033[92mC',
    'T': '\033[93mT',
    'G': '\033[94mG',
}

newlist = []
for letter in gnomicdata:
    newlist.append(color_pattern[letter])
gnomicstring = ''.join(newlist)
```
:::


::: {.callout-note collapse="true"}
## Upgrade using `list` comprehension
In the previous method, there is a `new list, for...list.append()` structure. This is exactly what `list` compreshension can do.

Here is the sample code.
```{python}
color_pattern = {
    'A': '\033[91mA',
    'C': '\033[92mC',
    'T': '\033[93mT',
    'G': '\033[94mG',
}

gnomicstring = ''.join([color_pattern[letter] for letter in gnomicdata])
```
The last piece of code is the best of the three. On the one side it is more condense and easy to read. On the other side, it is actually split into two pieces explicitly: the sytle part (`color_pattern`) and the code part (`gnomicstring`). The code part only controls changing colors, but the colors of the letters are controlled by the style part. This split make the code easier to maintain.
:::
