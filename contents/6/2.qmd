
## Example 2: US Baby Names 1880â€“2010
The United States Social Security Administration (SSA) has made available data on the frequency of baby names from 1880 through the present. Hadley Wickham, an author of several popular R packages, has often made use of this dataset in illustrating data manipulation in `R`. The dataset can be downloaded from [here](assests/datasets/babynames.zip) as a zip file. Please unzip it and put it in your working folder.



::: {#exm-}

In the folder there are 131 `.txt` files. The naming scheme is `yob` + the year. Each file contains 3 columns: `name`, `gender`, and `counts`. We would like to add a column `year`, and combine all files into a single DataFrame. In our example, the year is from 1880 to 2010.
:::


::: {.callout-tip collapse="true"}

```{python}
#| eval: false
import pandas as pd

path = 'assests/datasets/babynames/'
dflist = list()
for year in range(1880, 2011):
    filename = path + 'yob' + str(year) + '.txt'
    df = pd.read_csv(filename, names=['name', 'gender', 'counts'])
    df['year'] = year
    dflist.append(df)
df = pd.concat(dflist, ignore_index=True)
```

:::


::: {#exm-}

Plot the total births by sex and year.
:::


::: {.callout-tip collapse="true"}

```{python}
#| eval: false
import seaborn as sns

sns.relplot(data=df.groupby(['gender', 'year']).sum().reset_index(),
            x='year', y='counts', hue='gender', kind='line')
```


```{python}
#| echo: false
import seaborn as sns
sns.set_theme()
dfgy = pd.read_csv('assests/datasets/gy.csv')
sns.relplot(data=dfgy,
            x='year', y='counts', hue='gender', kind='line')
```


:::


::: {#exm-}

For further analysis, we would like to compute the proportions of each name relative to the total number of births per year per gender. 

:::


::: {.callout-tip collapse="true"}

```{python}
#| eval: false
def add_prop(group):
    group['prop'] = group.counts / group.counts.sum()
    return group

df = df.groupby(['gender', 'year']).apply(add_prop)
df.head()
```

```{python}
#| echo: false
babydf5 = pd.read_csv('assests/datasets/babydf5.csv')
babydf5
```
:::



::: {#exm-}

Now we would like to keep the first 100 names in each year, and save it as a new DataFrame `top100`.
:::


::: {.callout-tip collapse="true"}

```{python}
#| eval: false
top100 = (
    df.groupby(['year', 'gender'])
    .apply(lambda x: df.loc[x['counts'].nlargest(100).index])
    .drop(columns=['year', 'gender'])
    .reset_index()
    .drop(columns='level_2')
)
top100.head()
```

```{python}
#| echo: false
dftop100 = pd.read_csv('assests/datasets/baby100.csv')
dftop100
```


Note that `level_2` is related to the original index after `reset_index()`. That's why we don't need it here.
:::



::: {#exm-}
Now we would like to draw the trend of some names: `John`, `Harry` and `Mary`.
:::


::: {.callout-tip collapse="true"}

```{python}
#| eval: false
namelist = ['John', 'Harry', 'Mary']
sns.relplot(data=top100[top100['name'].isin(namelist)],
            x='year', y='counts', hue='name', kind='line')
```

```{python}
#| echo: false
babynamelist = pd.read_csv('assests/datasets/babynamelist.csv')
sns.relplot(data=babynamelist,
            x='year', y='counts', hue='name', kind='line')
```

:::


::: {#exm-}
Please analyze the ending of names.
:::


::: {.callout-tip collapse="true"}


```{python}
#| eval: false
df['ending'] = df['name'].str[-1]
endingcount = df.groupby(['gender', 'year', 'ending']).sum().reset_index()
```

:::



::: {#exm-}
We would like to draw barplots to show the distributions in year 1910, 1960 and 2010.


:::



::: {.callout-tip collapse="true"}


```{python}
#| eval: false
certainyear = endingcount[endingcount['year'].isin([1910, 1960, 2010])]
import matplotlib.pyplot as plt

fig, axs = plt.subplots(2, 1, figsize=(10,7))
sns.barplot(data=certainyear[endingcount['gender']=='M'],
            x='ending', y='prop', hue='year', ax=axs[0])
sns.barplot(data=certainyear[endingcount['gender']=='F'],
            x='ending', y='prop', hue='year', ax=axs[1]).legend_.remove()
```

```{python}
#| echo: false
babyyear = pd.read_csv('assests/datasets/babyyear.csv')
import matplotlib.pyplot as plt

fig, axs = plt.subplots(2, 1, figsize=(10,7))
sns.barplot(data=babyyear[babyyear['gender']=='M'],
            x='ending', y='prop', hue='year', ax=axs[0])
sns.barplot(data=babyyear[babyyear['gender']=='F'],
            x='ending', y='prop', hue='year', ax=axs[1]).legend_.remove()
```
:::


::: {#exm-}


We would also like to draw the line plot to show the trending of certain letters through years.
:::


::: {.callout-tip collapse="true"}

```{python}
#| eval: false
sns.relplot(data=endingcount[endingcount.ending.isin(['d', 'n', 'y'])],
            x='year', y='prop', hue='ending', kind='line')
```

```{python}
#| echo: false
babyending = pd.read_csv('assests/datasets/babyending.csv')
sns.relplot(data=babyending[babyending.ending.isin(['d', 'n', 'y'])],
            x='year', y='prop', hue='ending', kind='line')
```



:::
