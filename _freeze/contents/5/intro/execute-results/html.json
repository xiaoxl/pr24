{
  "hash": "d6e826f0bec81f735d98118a3c1481ed",
  "result": {
    "engine": "jupyter",
    "markdown": "# Visualization\n\n\nThe main reference for this Chapter is @McK2017.\n\n\n\n## `matplotlib.pyplot`\n\n`matplotlib` is a modern and classic plot library. Its main features are inspired by `MATLAB`. In this book we mostly use `pyplot` package from `matplotlib`. We use the following import convention:\n\n::: {#18dbcc5c .cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n```\n:::\n\n\n### `matplotlib` interface\n\n\n\n`matplotlib` has two major application interfaces, or styles of using the library:\n\n- An explicit `Axes` interface that uses methods on a `Figure` or `Axes` object to create other Artists, and build a visualization step by step. You may treat this `Figure` object as a canvas, and `Axes` as plots on a canvas. There might be one or more plots on one canvas. This has also been called an *object-oriented* interface.\n- An implicit `pyplot` interface that keeps track of the last `Figure` and `Axes` created, and adds Artists to the object it thinks the user wants.\n\nHere is an example of an explicit interface.\n\n::: {#ef2ff18c .cell execution_count=2}\n``` {.python .cell-code}\nfig = plt.figure()\nax = fig.subplots()\nax.plot([1, 2, 3, 4], [0, 0.5, 1, 0.2])\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-3-output-1.png){width=571 height=411}\n:::\n:::\n\n\nHere is an example of an implicit interface.\n\n::: {#d930a7fb .cell execution_count=3}\n``` {.python .cell-code}\nplt.plot([1, 2, 3, 4], [0, 0.5, 1, 0.2])\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-4-output-1.png){width=571 height=411}\n:::\n:::\n\n\n::: {.callout-note}\nIf the plot is not shown, you may want to type `plt.show()` to force the plot being rendered. However, to make `plt.show()` work is related to switching `matplotlib` backends, and is sometimes very complicated.\n:::\n\nThe purpose to explicitly use `fig` and `ax` is to have more control over the configurations. The first important configuration is subplots.\n\n- `.subplot()`\n- `.subplots()`\n- `.add_subplot()`\n\nPlease see the following examples.\n\n\n::: {#exm-}\n\n::: {#53174bce .cell execution_count=4}\n``` {.python .cell-code}\nplt.subplot(1, 2, 1)\nplt.plot([1, 2, 3], [0, 0.5, 0.2])\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-5-output-1.png){width=287 height=411}\n:::\n:::\n\n\n:::\n\n\n::: {#exm-}\n\n::: {#7a352bc2 .cell execution_count=5}\n``` {.python .cell-code}\nplt.subplot(1, 2, 1)\nplt.plot([1, 2, 3], [0, 0.5, 0.2])\nplt.subplot(1, 2, 2)\nplt.plot([3, 2, 1], [0, 0.5, 0.2])\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-6-output-1.png){width=571 height=411}\n:::\n:::\n\n\n:::\n\n\n::: {#exm-}\n\n::: {#db03756f .cell execution_count=6}\n``` {.python .cell-code}\nfig, axs = plt.subplots(1, 2)\naxs[0].plot([1, 2, 3], [0, 0.5, 0.2])\naxs[1].plot([3, 2, 1], [0, 0.5, 0.2])\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-7-output-1.png){width=571 height=411}\n:::\n:::\n\n\n:::\n\n\n::: {#exm-}\n\n::: {#b036c969 .cell execution_count=7}\n``` {.python .cell-code}\nimport numpy as np\nfig = plt.figure()\nax1 = fig.add_subplot(2, 2, 1)\nax2 = fig.add_subplot(2, 2, 3)\nax3 = fig.add_subplot(1, 2, 2)\n\nax3.plot([1, 2, 3], [0, 0.5, 0.2])\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-8-output-1.png){width=571 height=416}\n:::\n:::\n\n\nThe auguments `2, 2, 1` means that we split the figure into a `2x2` grid and the axis `ax1` is in the 1st position. The rest is understood in the same way.\n:::\n\n\n::: {#exm-}\nIf you don't explicitly initialize `fig` and `ax`, you may use `plt.gcf()` and `plt.gca()` to get the handles for further operations.\n\n::: {#e32b08ce .cell execution_count=8}\n``` {.python .cell-code}\nplt.subplot(1, 2, 1)\nax = plt.gca()\nax.plot([1, 2, 3], [0, 0.5, 0.2])\n\nplt.subplot(1, 2, 2)\nax = plt.gca()\nax.plot([3, 2, 1], [0, 0.5, 0.2])\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-9-output-1.png){width=571 height=411}\n:::\n:::\n\n\n:::\n\n\n\nThe purpose to explicitly use `fig` and `ax` is to have more control over the configurations. For example, when generate a `figure` object, we may use `figsize=(3, 3)` as an option to set the figure size to be `3x3`. `dpi` is another commonly modified option.\n\n::: {#fe97463a .cell execution_count=9}\n``` {.python .cell-code}\nfig = plt.figure(figsize=(2, 2), dpi=50)\nplt.plot([1, 2, 3], [0, 0.5, 0.2])\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-10-output-1.png){}\n:::\n:::\n\n\nIf you would like to change this setting later, you may use the following command before plotting. \n\n::: {#92fb81d0 .cell execution_count=10}\n``` {.python .cell-code}\nfig.set_size_inches(10, 10)\nfig.set_dpi(300)\nplt.plot([1, 2, 3], [0, 0.5, 0.2])\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-11-output-1.png){width=571 height=411}\n:::\n:::\n\n\nYou may use `fig.savefig('filename.png')` to save the image into a file.\n\n\n### Downstream packages\nThere are multiple packages depending on `matplotlib` to provide plotting. For example, you may directly plot from a Pandas DataFrame or a Pandas Series.\n\n::: {#exm-}\n\n::: {#0b79c1be .cell execution_count=11}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\ns = pd.Series(np.random.randn(10).cumsum(), index=np.arange(0, 100, 10))\ns.plot()\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-12-output-1.png){width=571 height=411}\n:::\n:::\n\n\n::: {#9b27835f .cell execution_count=12}\n``` {.python .cell-code}\ndf = pd.DataFrame(np.random.randn(10, 4).cumsum(0),\n                  columns=['A', 'B', 'C', 'D'],\n                  index=np.arange(0, 100, 10))\ndf.plot()\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-13-output-1.png){width=569 height=411}\n:::\n:::\n\n\n:::\n\n\n### plotting \n#### `plt.plot()`\nThis is the command for line plotting. You may use `linestyle='--'` and `color='g'` to control the line style and color. The style can be shortened as `g--`. \n\nHere is a list of commonly used linestyles and colors.\n\n- line styles\n    - `solid` or `-`\n    - `dashed` or `--`\n    - `dashdot` or `-.`\n    - `dotted` or `:`\n- marker styles\n    - `o` as circle markers\n    - `+` as plusses\n    - `^` as triangles\n    - `s` as squares\n- colors\n    - `b` as blue\n    - `g` as green\n    - `r` as red\n    - `k` as black\n    - `w` as white\n\nThe input of `plt.plot()` is two lists `x` and `y`. If there is only one list inputed, that one will be recognized as `y` and the index of elements of `y` will be used as the dafault `x`.\n\n\n::: {#exm-plot1}\n\n::: {#1806a830 .cell execution_count=13}\n``` {.python .cell-code}\nplt.plot(np.random.randn(30).cumsum(), color='r', linestyle='--', marker='o')\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-14-output-1.png){width=567 height=415}\n:::\n:::\n\n\nYou may compare it with this [Example](#exm-plotwithsns) for the purpose of `seaborn` from next Section.\n:::\n\n#### `plt.bar()` and `plt.barh()`\nThe two commands make vertical and horizontal bar plots, respectively.\n\n::: {#exm-}\n\n::: {#fc382b86 .cell execution_count=14}\n``` {.python .cell-code}\nimport pandas as pd\ndata = pd.Series(np.random.rand(16), index=list('abcdefghijklmnop'))\n\nfig, axes = plt.subplots(2, 1)\naxes[0].bar(x=data.index, height=data, color='k', alpha=0.7)\naxes[1].barh(y=data.index, width=data, color='b', alpha=0.7)\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-15-output-1.png){width=571 height=411}\n:::\n:::\n\n\nWe may also directly plot the bar plot from the Series. \n\n::: {#f0be304d .cell execution_count=15}\n``` {.python .cell-code}\nfig, axes = plt.subplots(2, 1)\ndata.plot.bar(ax=axes[0], color='k', alpha=0.7)\ndata.plot.barh(ax=axes[1], color='b', alpha=0.7)\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-16-output-1.png){width=571 height=411}\n:::\n:::\n\n\n:::\n\n\n\nWith a DataFrame, bar plots group the values in each row together in a group in bars. This is easier if we directly plot from the DataFrame.\n\n::: {#exm-}\n\n::: {#06829057 .cell execution_count=16}\n``` {.python .cell-code}\ndf = pd.DataFrame(np.random.rand(6, 4),\n                  index=['one', 'two', 'three', 'four', 'five', 'six'],\n                  columns=pd.Index(['A', 'B', 'C', 'D'], name='Genus'))\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Genus</th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>one</th>\n      <td>0.262462</td>\n      <td>0.116656</td>\n      <td>0.930068</td>\n      <td>0.771102</td>\n    </tr>\n    <tr>\n      <th>two</th>\n      <td>0.891918</td>\n      <td>0.067489</td>\n      <td>0.972940</td>\n      <td>0.384689</td>\n    </tr>\n    <tr>\n      <th>three</th>\n      <td>0.159806</td>\n      <td>0.250860</td>\n      <td>0.626908</td>\n      <td>0.184446</td>\n    </tr>\n    <tr>\n      <th>four</th>\n      <td>0.201407</td>\n      <td>0.272930</td>\n      <td>0.896539</td>\n      <td>0.478261</td>\n    </tr>\n    <tr>\n      <th>five</th>\n      <td>0.830620</td>\n      <td>0.807160</td>\n      <td>0.004148</td>\n      <td>0.640755</td>\n    </tr>\n    <tr>\n      <th>six</th>\n      <td>0.357200</td>\n      <td>0.644064</td>\n      <td>0.529182</td>\n      <td>0.829858</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#68b5f02e .cell execution_count=17}\n``` {.python .cell-code}\ndf.plot.bar()\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-18-output-1.png){width=571 height=433}\n:::\n:::\n\n\n::: {#d95b8412 .cell execution_count=18}\n``` {.python .cell-code}\ndf.plot.barh(stacked=True, alpha=0.5)\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-19-output-1.png){width=585 height=411}\n:::\n:::\n\n\n:::\n\n#### `plt.scatter()`\n\n\n::: {#exm-}\n\n::: {#3a5909c3 .cell execution_count=19}\n``` {.python .cell-code}\nimport numpy as np\n\nN = 100\ndata = 0.9 * np.random.rand(N, 2)\narea = (20 * np.random.rand(N))**2 \nc = np.sqrt(area)\nplt.scatter(data[:, 0], data[:, 1], s=area, marker='^', c=c)\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-20-output-1.png){width=571 height=411}\n:::\n:::\n\n\n:::\n\n\n#### `plt.hist()`\nHere are two plots with build-in statistics. The plot command will have statistics as outputs. To disable it we could send the outputs to a temporary variable `_`.\n\n::: {#exm-histogram1}\n\n::: {#ae5e3aa2 .cell execution_count=20}\n``` {.python .cell-code}\nmu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\ny = mu-30 + sigma*2 * np.random.randn(10000)\n_ = plt.hist(x, 50, density=True, facecolor='g', alpha=0.75)\n_ = plt.hist(y, 50, density=True, facecolor='r', alpha=0.75)\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-21-output-1.png){width=588 height=411}\n:::\n:::\n\n\n:::\n\n\n### `plt.boxplot()`\n\n::: {#exm-}\n\n::: {#f449b702 .cell execution_count=21}\n``` {.python .cell-code}\nspread = np.random.rand(50) * 100\ncenter = np.ones(30) * 50\nflier_high = np.random.rand(10) * 100 + 100\nflier_low = np.random.rand(10) * -100\ndata = np.concatenate((spread, center, flier_high, flier_low)).reshape(50, 2)\n\n_ = plt.boxplot(data, flierprops={'markerfacecolor': 'g', 'marker': 'D'})\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-22-output-1.png){width=578 height=411}\n:::\n:::\n\n\n:::\n\n### Titles, labels and legends\n\n- Titles\n    - `plt.title(label)`, `plt.xlabel(label)`, `plt.ylabel(label)` will set the title/xlabel/ylabel.\n    - `ax.set_title(label)`, `ax.set_xlabel(label)`, `ax.set_ylabel(label)` will do the same thing.\n- Labels\n    - `plt` methods\n        - `xlim()`, `ylim()`, `xticks()`, `yticks()`, `xticklabels()`, `yticklabels()`\n        - all the above with arguments\n    - `ax` methods\n        - `get_xlim()`, `get_ylim()`, etc..\n        - `set_xlim()`, `set_ylim()`, etc..\n- Legneds\n    - First add `label` option to each piece when plotting, and then add `ax.legends()` or `plt.legends()` at the end to display the legends.\n    - You may use `handles, labels = ax.get_legend_handles_labels()` to get the handles and labels of the legends, and modify them if necessary.\n\n\n::: {#exm-}\n\n::: {#dce25e50 .cell execution_count=22}\n``` {.python .cell-code}\nimport numpy as np\nfig, ax = plt.subplots(1, 1)\nax.plot(np.random.randn(1000).cumsum(), 'k', label='one')\nax.plot(np.random.randn(1000).cumsum(), 'r--', label='two')\nax.plot(np.random.randn(1000).cumsum(), 'b.', label='three')\n\nax.set_title('Example')\nax.set_xlabel('x')\nax.set_ylabel('y')\n\nax.set_yticks([-40, 0, 40])\nax.set_yticklabels(['good', 'bad', 'ugly'])\n\nax.legend(loc='best')\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-23-output-1.png){width=601 height=449}\n:::\n:::\n\n\n:::\n\n### Annotations\n\n- The command to add simple annotations is `ax.text()`. The required auguments are the coordinates of the text and the text itself. You may add several options to modify the style.\n- If arrows are needed, we may use `ax.annotation()`. Here an arrow will be shown from `xytext` to `xy`. The style of the arrow is controlled by the option `arrowprops`.\n\n\n::: {#exm-}\n\n::: {#fc1d6a51 .cell execution_count=23}\n``` {.python .cell-code}\nfig, ax = plt.subplots(figsize=(5, 5))\nax.plot(np.random.randn(1000).cumsum(), 'k', label='one')\nax.text(500, 0, 'Hello world!', family='monospace', fontsize=15, c='r')\nax.annotate('test', xy=(400, 0), xytext=(400, -10), c='r',\n            arrowprops={'facecolor': 'black',\n                        'shrink': 0.05})\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\nText(400, -10, 'test')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-24-output-2.png){width=429 height=411}\n:::\n:::\n\n\n:::\n\n\n### Example\n\n::: {#exm-}\nThe stock data can be downloaded from [here](assests/datasets/spx.csv). \n\n::: {#e4aba5ec .cell execution_count=24}\n``` {.python .cell-code}\nfrom datetime import datetime\nfig, ax = plt.subplots()\ndata = pd.read_csv('assests/datasets/spx.csv', index_col=0, parse_dates=True)\nspx = data['SPX']\nspx.plot(ax=ax, style='k-')\ncrisis_data = [(datetime(2007, 10, 11), 'Peak of bull market'),\n               (datetime(2008, 3, 12), 'Bear Stearns Fails'),\n               (datetime(2008, 9, 15), 'Lehman Bankruptcy')]\nfor date, label in crisis_data:\n    ax.annotate(label, xy=(date, spx.asof(date) + 75),\n                xytext=(date, spx.asof(date) + 225),\n                arrowprops=dict(facecolor='black', headwidth=4, width=2,\n                                headlength=4),\n                horizontalalignment='left', verticalalignment='top')\nax.set_xlim(['1/1/2007', '1/1/2011'])\nax.set_ylim([600, 1800])\n_ = ax.set_title('Important dates in the 2008-2009 financial crisis')\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-25-output-1.png){width=595 height=432}\n:::\n:::\n\n\n:::\n\n\n::: {#exm-}\nHere is an example of arrows with different shapes. For more details please read the official [document](https://matplotlib.org/stable/tutorials/text/annotations.html#annotating-with-arrow).\n\n::: {#a0cb269d .cell execution_count=25}\n``` {.python .cell-code}\nfig, ax = plt.subplots()\n\nx = np.linspace(0, 20, 1000)\nax.plot(x, np.cos(x))\nax.axis('equal')\n\nax.annotate('local maximum', xy=(6.28, 1), xytext=(10, 4),\n            arrowprops=dict(facecolor='black', shrink=0.05))\n\nax.annotate('local minimum', xy=(5 * np.pi, -1), xytext=(2, -6),\n            arrowprops=dict(arrowstyle=\"->\",\n                            connectionstyle=\"angle3,angleA=0,angleB=-90\",\n                            color='r'))\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\nText(2, -6, 'local minimum')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-26-output-2.png){width=569 height=411}\n:::\n:::\n\n\n:::\n\n\n## `seaborn`\n\nThere are some new libraries built upon `matplotlib`, and `seaborn` is one of them. `seaborn` is for statistical graphics. \n\n`seaborn` is used imported in the following way.\n\n::: {#c5851fa6 .cell execution_count=26}\n``` {.python .cell-code}\nimport seaborn as sns\n```\n:::\n\n\n\n\n`seaborn` also modifies the default `matplotlib` color schemes and plot styles to improve readability and aesthetics. Even if you do not use the `seaborn` API, you may prefer to import `seaborn` as a simple way to improve the visual aesthetics of general `matplotlib` plots.\n\nTo apply `sns` theme, run the following code.\n\n::: {#adbbd52e .cell execution_count=28}\n``` {.python .cell-code}\nsns.set_theme()\n```\n:::\n\n\nLet us directly run a few codes from the last section and compare the differences between them.\n\n\n\n::: {#exm-plotwithsns}\n\n::: {#cfd7d26c .cell execution_count=29}\n``` {.python .cell-code}\nplt.plot(np.random.randn(30).cumsum(), color='r', linestyle='--', marker='o')\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-30-output-1.png){width=562 height=415}\n:::\n:::\n\n\nPlease compare the output of the same code with [the previous example](#exm-plot1)\n:::\n\n\n### Scatter plots with `relplot()`\n\nThe basic scatter plot method is `scatterplot()`. It is wrapped in `relplot()` as the default plotting method. So here we will mainly talk about `relplot()`. It is named that way because it is designed to visualize many different statistical relationships. \n\nThe idea of `relplot()` is to display points based on the variables `x` and `y` you choose, and assign different properties to alter the apperance of the points. \n\n- `col` will create multiple plots based on the column you choose.\n- `hue` is for color encoding, based on the column you choose.\n- `size` will change the marker area, based on the column you choose.\n- `style` will change the marker symbol, based on the column you choose.\n\n\n::: {#exm-}\nConsider the following example. `tips` is a DataFrame, which is shown below.\n\n::: {#4c294ffc .cell execution_count=30}\n``` {.python .cell-code}\nimport seaborn as sns\ntips = sns.load_dataset(\"tips\")\ntips\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>total_bill</th>\n      <th>tip</th>\n      <th>sex</th>\n      <th>smoker</th>\n      <th>day</th>\n      <th>time</th>\n      <th>size</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>16.99</td>\n      <td>1.01</td>\n      <td>Female</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10.34</td>\n      <td>1.66</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>21.01</td>\n      <td>3.50</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>23.68</td>\n      <td>3.31</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>24.59</td>\n      <td>3.61</td>\n      <td>Female</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>239</th>\n      <td>29.03</td>\n      <td>5.92</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sat</td>\n      <td>Dinner</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>240</th>\n      <td>27.18</td>\n      <td>2.00</td>\n      <td>Female</td>\n      <td>Yes</td>\n      <td>Sat</td>\n      <td>Dinner</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>241</th>\n      <td>22.67</td>\n      <td>2.00</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>Sat</td>\n      <td>Dinner</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>242</th>\n      <td>17.82</td>\n      <td>1.75</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sat</td>\n      <td>Dinner</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>243</th>\n      <td>18.78</td>\n      <td>3.00</td>\n      <td>Female</td>\n      <td>No</td>\n      <td>Thur</td>\n      <td>Dinner</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n<p>244 rows × 7 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#311cc16e .cell execution_count=31}\n``` {.python .cell-code}\nsns.relplot(data=tips,\n            x=\"total_bill\", y=\"tip\", col=\"time\",\n            hue=\"smoker\", style=\"smoker\", size=\"size\")\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-32-output-1.png){width=1048 height=464}\n:::\n:::\n\n\n:::\n\nThe default type of plots for `relplot()` is scatter plots. However you may change it to line plot by setting `kind='line'`.\n\n\n::: {#exm-}\n\n::: {#671d6ad5 .cell execution_count=32}\n``` {.python .cell-code}\ndots = sns.load_dataset(\"dots\")\nsns.relplot(data=dots, kind=\"line\",\n            x=\"time\", y=\"firing_rate\", col=\"align\",\n            hue=\"choice\", size=\"coherence\", style=\"choice\",\n            facet_kws=dict(sharex=False))\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-33-output-1.png){width=1067 height=464}\n:::\n:::\n\n\n:::\n\n### `regplot()`\nThis method is a combination between scatter plots and linear regression.\n\n::: {#exm-}\nWe still use `tips` as an example.\n\n::: {#6f8d9d4f .cell execution_count=33}\n``` {.python .cell-code}\nsns.regplot(x='total_bill', y='tip', data=tips)\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-34-output-1.png){width=589 height=435}\n:::\n:::\n\n\n:::\n\n\n### `pairplot()`\nThis is a way to display the pairwise relations among several variables. \n\n::: {#exm-}\nThe following code shows the pairplots among all numeric data in `tips`.\n\n::: {#db0cb621 .cell execution_count=34}\n``` {.python .cell-code}\nsns.pairplot(tips, diag_kind='kde', plot_kws={'alpha': 0.2})\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-35-output-1.png){width=708 height=708}\n:::\n:::\n\n\n:::\n\n\n### `barplot`\n\n\n::: {#exm-}\n\n::: {#5c13f4b7 .cell execution_count=35}\n``` {.python .cell-code}\nsns.barplot(x='total_bill', y='day', data=tips, orient='h')\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-36-output-1.png){width=603 height=435}\n:::\n:::\n\n\nIn the plot, there are several `total_bill` during each `day`. The value in the plot is the average of `total_bill` in each `day`, and the black line stands for the `95%` confidence interval.\n\n::: {#b92eee42 .cell execution_count=36}\n``` {.python .cell-code}\nsns.barplot(x='total_bill', y='day', hue='time', data=tips, orient='h')\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-37-output-1.png){width=603 height=435}\n:::\n:::\n\n\nIn this plot, lunch and dinner are distinguished by colors.\n:::\n\n### Histogram\n\n::: {#exm-}\n\n::: {#6b4321b0 .cell execution_count=37}\n``` {.python .cell-code}\nmu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\ny = mu-30 + sigma*2 * np.random.randn(10000)\ndf = pd.DataFrame(np.array([x,y]).T)\nsns.histplot(df, bins=100, kde=True)\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-38-output-1.png){width=597 height=415}\n:::\n:::\n\n\nPlease compare this plot with [this Example](#exm-histogram1)\n:::\n\n\n## Exercises\n\n\n\n::: {#exr-}\nPlease download the `mtcars` file from [here](assests/datasets/mtcars.csv) and read it as a DataFrame. Then create a scatter plot of the `drat` and `wt` variables from `mtcars` and color the dots by the `carb` variable. \n:::\n\n\n\n\n\n::: {#exr-}\nPlease read the file as a DataFrame from [here](assests/datasets/QSR.csv). This is the Dining satisfaction with quick service restaurants questionare data provided by Dr. Siri McDowall, supported by DART SEED grant.\n\n1. Please pick out all rating columns. Excluding `last.visit`, `visit.again` and `recommend`, compute the mean of the rest and add it to the DataFrame as a new column.\n2. Use a plot to show the relations among these four columns:  `last.visit`, `visit.again`, `recommend` and `mean`.\n3. Look at the column `Profession`. Keep `Student`, and change everything else to be `Professional`, and add it as a new column `Status` to the DataFrame.\n4. Draw the histogram of `mean` with respect to `Status`.\n5. Find the counts of each `recommend` rating for each `Status` and draw the barplot. Do the same to `last.visit`/`Status` and `visit.again`/`Status`.\n6. Explore the dataset and draw one plot.\n:::\n\n",
    "supporting": [
      "intro_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}