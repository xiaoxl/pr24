{
  "hash": "d64ad9c5eff12c624e8a197a3cde5368",
  "result": {
    "engine": "jupyter",
    "markdown": "# Projects with Python\n\n\n\n## Example 1: `USA.gov` Data From `Bitly`\nIn 2011, URL shortening service `Bitly` partnered with the US government website\n`USA.gov` to provide a feed of anonymous data gathered from users who shorten links\nending with `.gov` or `.mil`. The data is gotten from @McK2017.\n\nThe data file can be downloaded from [here](assests/datasets/example.txt). The file is mostly in JSON. It can be converted into a DataFrame by the following code.\n\n::: {#6cfcb705 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport json\npath = 'assests/datasets/example.txt'\ndf = pd.DataFrame([json.loads(line) for line in open(path)])\n```\n:::\n\n\nWe mainly use `tz` and `a` columns. So let us clean it.\n\n::: {#5477bec3 .cell execution_count=2}\n``` {.python .cell-code}\ndf['tz'] = df['tz'].fillna('Missing')\ndf['tz'][df['tz'] == ''] = 'Unknown'\ndf['a'] = df['a'].fillna('Missing')\ndf['a'][df['a'] == ''] = 'Unknown'\n```\n:::\n\n\n::: {#exm-}\n\nWe first want to extract the timezone infomation from it. The timezone info is in the column `tz`. Please count different values in the columns `tz`.\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n\n::: {#b9223b61 .cell execution_count=3}\n``` {.python .cell-code}\ntzone = df['tz']\ntvc = tzone.value_counts()\ntvc\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\ntz\nAmerica/New_York        1251\nUnknown                  521\nAmerica/Chicago          400\nAmerica/Los_Angeles      382\nAmerica/Denver           191\n                        ... \nEurope/Uzhgorod            1\nAustralia/Queensland       1\nEurope/Sofia               1\nAmerica/Costa_Rica         1\nAmerica/Tegucigalpa        1\nName: count, Length: 98, dtype: int64\n```\n:::\n:::\n\n\n:::\n\n\n\n::: {#exm-}\nWe would like to visulize the value counts. You may just show the top ten results. \n:::\n\n::: {.callout-tip collapse=\"true\"}\n\n::: {#975c317f .cell execution_count=4}\n``` {.python .cell-code}\nimport seaborn as sns\nsns.barplot(x=tvc[:10].values, y=tvc[:10].index)\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-5-output-1.png){width=709 height=411}\n:::\n:::\n\n\n:::\n\n\n\n::: {#exm-}\n\nWe then would like to extract information from the column `a`. This column is about the agent of the connection. The important info is the part before the space `' '`. Please get that part out and count values.\n\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n\n::: {#6ec04332 .cell execution_count=5}\n``` {.python .cell-code}\nagent = df['a']\nagent = agent.str.split(' ').str[0]\navc = agent.value_counts()\navc.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\na\nMozilla/5.0               2594\nMozilla/4.0                601\nGoogleMaps/RochesterNY     121\nMissing                    120\nOpera/9.80                  34\nName: count, dtype: int64\n```\n:::\n:::\n\n\n:::\n\n\n::: {#exm-}\n\nNow let us assume that, if `Windows` appears in column `a` the user is using `Windows` os, if not then not. Please detect os, and classify it as `Windows` and `Not Windows`.\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n\n::: {#c997b3ca .cell execution_count=6}\n``` {.python .cell-code}\ndf['os'] = np.where(df['a'].str.contains('Windows'), 'Windows', 'Not Windows')\n```\n:::\n\n\n:::\n\nNow make a bar plot about the counts based on `os` and `timezone`.\n\n::: {#exm-}\nWe first group the data by `os` and `tz`.\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n\n::: {#e459da04 .cell execution_count=7}\n``` {.python .cell-code}\ntz_os_counts = df.groupby(['tz', 'os']).size().unstack().fillna(0)\ntz_os_counts.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>os</th>\n      <th>Not Windows</th>\n      <th>Windows</th>\n    </tr>\n    <tr>\n      <th>tz</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Africa/Cairo</th>\n      <td>0.0</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>Africa/Casablanca</th>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>Africa/Ceuta</th>\n      <td>0.0</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>Africa/Johannesburg</th>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>Africa/Lusaka</th>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n\n::: {#exm-}\nWe then turn it into a DataFrame. You may use any methods.\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n\nWe use the `.stack()`, `.unstack()` tricks here.\n\n::: {#c8a90d32 .cell execution_count=8}\n``` {.python .cell-code}\ntovc = tz_os_counts.stack()[tz_os_counts.sum(axis=1).nlargest(10).index]\ntovc.name = 'count'\ndftovc = pd.DataFrame(tovc).reset_index()\ndftovc.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>tz</th>\n      <th>os</th>\n      <th>count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>America/New_York</td>\n      <td>Not Windows</td>\n      <td>339.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>America/New_York</td>\n      <td>Windows</td>\n      <td>912.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Unknown</td>\n      <td>Not Windows</td>\n      <td>245.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Unknown</td>\n      <td>Windows</td>\n      <td>276.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>America/Chicago</td>\n      <td>Not Windows</td>\n      <td>115.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n\n::: {#exm-}\nWe may now draw the bar plot showing `tz` and `os`.\n:::\n\n\n\n::: {.callout-tip collapse=\"true\"}\n\n::: {#9489afda .cell execution_count=9}\n``` {.python .cell-code}\nsns.barplot(x='count', y='tz', hue='os', data=dftovc)\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-10-output-1.png){width=709 height=429}\n:::\n:::\n\n\n:::\n\n\n\n## Example 2: US Baby Names 1880â€“2010\nThe United States Social Security Administration (SSA) has made available data on the frequency of baby names from 1880 through the present. Hadley Wickham, an author of several popular R packages, has often made use of this dataset in illustrating data manipulation in `R`. The dataset can be downloaded from [here](assests/datasets/babynames.zip) as a zip file. Please unzip it and put it in your working folder.\n\n\n\n::: {#exm-}\n\nIn the folder there are 131 `.txt` files. The naming scheme is `yob` + the year. Each file contains 3 columns: `name`, `gender`, and `counts`. We would like to add a column `year`, and combine all files into a single DataFrame. In our example, the year is from 1880 to 2010.\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n\n::: {#e2309bb0 .cell execution_count=10}\n``` {.python .cell-code}\nimport pandas as pd\n\npath = 'assests/datasets/babynames/'\ndflist = list()\nfor year in range(1880, 2011):\n    filename = path + 'yob' + str(year) + '.txt'\n    df = pd.read_csv(filename, names=['name', 'gender', 'counts'])\n    df['year'] = year\n    dflist.append(df)\ndf = pd.concat(dflist, ignore_index=True)\n```\n:::\n\n\n:::\n\n\n::: {#exm-}\n\nPlot the total births by sex and year.\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n\n::: {#de385264 .cell execution_count=11}\n``` {.python .cell-code}\nimport seaborn as sns\n\nsns.relplot(data=df.groupby(['gender', 'year']).sum().reset_index(),\n            x='year', y='counts', hue='gender', kind='line')\n```\n:::\n\n\n::: {#e76e8e63 .cell execution_count=12}\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-13-output-1.png){width=530 height=464}\n:::\n:::\n\n\n:::\n\n\n::: {#exm-}\n\nFor further analysis, we would like to compute the proportions of each name relative to the total number of births per year per gender. \n\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n\n::: {#a19ef2f0 .cell execution_count=13}\n``` {.python .cell-code}\ndef add_prop(group):\n    group['prop'] = group.counts / group.counts.sum()\n    return group\n\ndf = df.groupby(['gender', 'year']).apply(add_prop)\ndf.head()\n```\n:::\n\n\n::: {#6fe32bbc .cell execution_count=14}\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>gender</th>\n      <th>counts</th>\n      <th>year</th>\n      <th>prop</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Mary</td>\n      <td>F</td>\n      <td>7065</td>\n      <td>1880</td>\n      <td>0.077643</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Anna</td>\n      <td>F</td>\n      <td>2604</td>\n      <td>1880</td>\n      <td>0.028618</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Emma</td>\n      <td>F</td>\n      <td>2003</td>\n      <td>1880</td>\n      <td>0.022013</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Elizabeth</td>\n      <td>F</td>\n      <td>1939</td>\n      <td>1880</td>\n      <td>0.021309</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Minnie</td>\n      <td>F</td>\n      <td>1746</td>\n      <td>1880</td>\n      <td>0.019188</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n\n\n::: {#exm-}\n\nNow we would like to keep the first 100 names in each year, and save it as a new DataFrame `top100`.\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n\n::: {#425be4d5 .cell execution_count=15}\n``` {.python .cell-code}\ntop100 = (\n    df.groupby(['year', 'gender'])\n    .apply(lambda x: df.loc[x['counts'].nlargest(100).index])\n    .drop(columns=['year', 'gender'])\n    .reset_index()\n    .drop(columns='level_2')\n)\ntop100.head()\n```\n:::\n\n\n::: {#b8ddaff2 .cell execution_count=16}\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>gender</th>\n      <th>name</th>\n      <th>counts</th>\n      <th>prop</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1880</td>\n      <td>F</td>\n      <td>Mary</td>\n      <td>7065</td>\n      <td>0.077643</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1880</td>\n      <td>F</td>\n      <td>Anna</td>\n      <td>2604</td>\n      <td>0.028618</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1880</td>\n      <td>F</td>\n      <td>Emma</td>\n      <td>2003</td>\n      <td>0.022013</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1880</td>\n      <td>F</td>\n      <td>Elizabeth</td>\n      <td>1939</td>\n      <td>0.021309</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1880</td>\n      <td>F</td>\n      <td>Minnie</td>\n      <td>1746</td>\n      <td>0.019188</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNote that `level_2` is related to the original index after `reset_index()`. That's why we don't need it here.\n:::\n\n\n\n::: {#exm-}\nNow we would like to draw the trend of some names: `John`, `Harry` and `Mary`.\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n\n::: {#5b906c21 .cell execution_count=17}\n``` {.python .cell-code}\nnamelist = ['John', 'Harry', 'Mary']\nsns.relplot(data=top100[top100['name'].isin(namelist)],\n            x='year', y='counts', hue='name', kind='line')\n```\n:::\n\n\n::: {#fb9f0b5a .cell execution_count=18}\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-19-output-1.png){width=546 height=464}\n:::\n:::\n\n\n:::\n\n\n::: {#exm-}\nPlease analyze the ending of names.\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n\n::: {#6646f66d .cell execution_count=19}\n``` {.python .cell-code}\ndf['ending'] = df['name'].str[-1]\nendingcount = df.groupby(['gender', 'year', 'ending']).sum().reset_index()\n```\n:::\n\n\n:::\n\n\n\n::: {#exm-}\nWe would like to draw barplots to show the distributions in year 1910, 1960 and 2010.\n\n\n:::\n\n\n\n::: {.callout-tip collapse=\"true\"}\n\n::: {#f7ece2a4 .cell execution_count=20}\n``` {.python .cell-code}\ncertainyear = endingcount[endingcount['year'].isin([1910, 1960, 2010])]\nimport matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(2, 1, figsize=(10,7))\nsns.barplot(data=certainyear[endingcount['gender']=='M'],\n            x='ending', y='prop', hue='year', ax=axs[0])\nsns.barplot(data=certainyear[endingcount['gender']=='F'],\n            x='ending', y='prop', hue='year', ax=axs[1]).legend_.remove()\n```\n:::\n\n\n::: {#549449a6 .cell execution_count=21}\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-22-output-1.png){width=824 height=583}\n:::\n:::\n\n\n:::\n\n\n::: {#exm-}\n\n\nWe would also like to draw the line plot to show the trending of certain letters through years.\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n\n::: {#e48eb6e9 .cell execution_count=22}\n``` {.python .cell-code}\nsns.relplot(data=endingcount[endingcount.ending.isin(['d', 'n', 'y'])],\n            x='year', y='prop', hue='ending', kind='line')\n```\n:::\n\n\n::: {#b508a706 .cell execution_count=23}\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-24-output-1.png){width=525 height=464}\n:::\n:::\n\n\n:::\n\n## Exercises\n\n::: {#exr-}\nPlease use the baby name dataset. We would like to consider the diversity of the names. Please compute the number of popular names in top 50% for each year each gender. Draw a line plot to show the trend and discuss the result.\n:::\n\n\n\n::: {#exr-}\nPlease consider the baby name dataset. Please draw the trends of counts of names ending in `a`, `e`, `n` across years for each gender.\n:::\n\n",
    "supporting": [
      "intro_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}