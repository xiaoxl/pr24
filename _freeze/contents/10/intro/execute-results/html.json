{
  "hash": "7c486db3c5fd763260bd558f8bda2562",
  "result": {
    "engine": "knitr",
    "markdown": "# Projects with R\n\n\n\n\n## WHO TB dataset\nLet us explore the tuberculosis cases data. The dataset is provided by WHO and can be downloaded from [here](https://www.who.int/teams/global-tuberculosis-programme/data). `tidyr` also provides the dataset. You may directly get the dataset after you load `tidyr` from `tidyverse`. The variable description can be found from [`tidyr` documentations](https://tidyr.tidyverse.org/reference/who.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.4     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.1\n#> ✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.2     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\nwho\n#> # A tibble: 7,240 × 60\n#>    country  iso2  iso3   year new_sp_m014 new_sp_m1524 new_sp_m2534 new_sp_m3544\n#>    <chr>    <chr> <chr> <dbl>       <dbl>        <dbl>        <dbl>        <dbl>\n#>  1 Afghani… AF    AFG    1980          NA           NA           NA           NA\n#>  2 Afghani… AF    AFG    1981          NA           NA           NA           NA\n#>  3 Afghani… AF    AFG    1982          NA           NA           NA           NA\n#>  4 Afghani… AF    AFG    1983          NA           NA           NA           NA\n#>  5 Afghani… AF    AFG    1984          NA           NA           NA           NA\n#>  6 Afghani… AF    AFG    1985          NA           NA           NA           NA\n#>  7 Afghani… AF    AFG    1986          NA           NA           NA           NA\n#>  8 Afghani… AF    AFG    1987          NA           NA           NA           NA\n#>  9 Afghani… AF    AFG    1988          NA           NA           NA           NA\n#> 10 Afghani… AF    AFG    1989          NA           NA           NA           NA\n#> # ℹ 7,230 more rows\n#> # ℹ 52 more variables: new_sp_m4554 <dbl>, new_sp_m5564 <dbl>,\n#> #   new_sp_m65 <dbl>, new_sp_f014 <dbl>, new_sp_f1524 <dbl>,\n#> #   new_sp_f2534 <dbl>, new_sp_f3544 <dbl>, new_sp_f4554 <dbl>,\n#> #   new_sp_f5564 <dbl>, new_sp_f65 <dbl>, new_sn_m014 <dbl>,\n#> #   new_sn_m1524 <dbl>, new_sn_m2534 <dbl>, new_sn_m3544 <dbl>,\n#> #   new_sn_m4554 <dbl>, new_sn_m5564 <dbl>, new_sn_m65 <dbl>, …\n```\n:::\nBased on the description of varaibles, we understand that\n\n1. `country`, `iso2`, `iso3` are all refered to country names (and thus they are redundant).\n2. Columns after `year`, like `new_sp_m014` etc., are counts of new TB cases recorded by groups. The code has three parts, most of which are separated by `_` (but there are some exceptions). \n    - The first part is always `new`.\n    - The second part is a code for method of diagnosis:\n        - `rel` = relapse,\n        - `sn` = negative pulmonary smear,\n        - `sp` = positive pulmonary smear, \n        - `ep` = extrapulmonary.\n    - The third part is a code for gender (`f` = female, `m` = male) and a code for age group:\n        - `014` = 0-14 yrs of age, \n        - `1524` = 15-24 years of age, \n        - `2534` = 25 to 34 years of age,\n        - `3544` = 35 to 44 years of age,\n        - `4554` = 45 to 54 years of age,\n        - `5564` = 55 to 64 years of age,\n        - `65` = 65 years of age or older\n\nTherefore to clean the data, we need the following steps.\n\n\n::: {#exm-}\nGather together all the columns from `new_sp_m014` to `newrel_f65`.\n\n::: {.callout-tip collapse='true'}\n\n::: {.cell}\n\n```{.r .cell-code}\nwholonger <- who %>% pivot_longer(cols=5:60, names_to='group', values_to='counts')\n```\n:::\n\n:::\n\n:::\n\n\nThen we use `stringr::str_replace()` to replace `newrel` by `new_rel`.\n\n::: {.cell}\n\n```{.r .cell-code}\nwholonger2 <- wholonger %>% mutate(key=str_replace(group, 'newrel', 'new_rel'))\n```\n:::\n\n\n::: {#exm-}\nParse the column `group` into columns.\n\n::: {.callout-tip collapse='true'}\n\n::: {.cell}\n\n```{.r .cell-code}\nwholonger3 <- wholonger2 %>% \n        separate(key, into=c('new', 'type', 'genderage'), sep='_') %>% \n        separate(genderage, into=c('gender', 'age'), sep=1)\n```\n:::\n:::\n:::\n\n\n\n::: {#exm-}\nPick the columns that matters.\n\n::: {.callout-tip collapse='true'}\n\n::: {.cell}\n\n```{.r .cell-code}\ntidywho <- wholonger3[c('country', 'year', 'type', 'gender', 'age', 'counts')]\n```\n:::\n\n:::\n:::\n\n\nWe could use the pipe symbol to connect all the above steps.\n\n\n::: {.callout-tip collapse='true'}\n\n::: {.cell}\n\n```{.r .cell-code}\ntidywho <- who %>% \n    pivot_longer(cols=5:60, names_to='group', values_to='counts') %>% \n    mutate(key=str_replace(group, 'newrel', 'new_rel')) %>% \n    separate(key, into=c('new', 'type', 'genderage'), sep='_') %>% \n    separate(genderage, into=c('gender', 'age'), sep=1) %>% \n    select('country', 'year', 'type', 'gender', 'age', 'counts')\n```\n:::\n\n:::\n\n\n## US Babynames\n\nLet us use R to solve the babynames dataset again. \n\nThe first task is to read those files.\n\n\n::: {#exm-}\nPlease read files and put the data into one tibble. The dataset can be downloaded from [here](assests/datasets/babynames.zip) as a zip file.\n\n::: {.cell}\n\n:::\n\n::: {.callout-tip collapse=\"true\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npath <- 'assessts/datasets/babynames/yob'\ndfs <- map(1880:2010, function(y){\n    filepath <- paste0(path, as.character(y), '.txt')\n    df_individual <- tibble(read.csv(filepath, header=FALSE))\n    names(df_individual) <- c('name', 'gender', 'counts')\n    df_individual$year <- y\n    df_individual\n})\ndf <- bind_rows(dfs)\n```\n:::\n:::\n:::\n\n\n\n::: {#exm-}\nPlease plot the total births by gender and year.\n\n::: {.callout-tip collapse=\"true\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n    group_by(gender, year) %>% \n    summarize(total_num=sum(counts)) %>% \n    ggplot() +\n        geom_line(mapping = aes(x=year, y=total_num, color=gender))\n#> `summarise()` has grouped output by 'gender'. You can override using the\n#> `.groups` argument.\n```\n\n::: {.cell-output-display}\n![](intro_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n:::\n\n:::\n\n\n::: {#exm-}\nPlease compute the proportions of each name relateive to the total number of births per year per gender. \n\n::: {.callout-tip collapse='true'}\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n    group_by(gender, year) %>% \n    mutate(prop=counts/sum(counts))\n#> # A tibble: 1,690,784 × 5\n#> # Groups:   gender, year [262]\n#>    name      gender counts  year   prop\n#>    <chr>     <chr>   <int> <int>  <dbl>\n#>  1 Mary      F        7065  1880 0.0776\n#>  2 Anna      F        2604  1880 0.0286\n#>  3 Emma      F        2003  1880 0.0220\n#>  4 Elizabeth F        1939  1880 0.0213\n#>  5 Minnie    F        1746  1880 0.0192\n#>  6 Margaret  F        1578  1880 0.0173\n#>  7 Ida       F        1472  1880 0.0162\n#>  8 Alice     F        1414  1880 0.0155\n#>  9 Bertha    F        1320  1880 0.0145\n#> 10 Sarah     F        1288  1880 0.0142\n#> # ℹ 1,690,774 more rows\n```\n:::\n\n:::\n:::\n\n\n\n::: {#exm-}\nWe would like to keep the first 100 names (by counts) in each year and save it as a new tibble `top100`.\n\n::: {.callout-tip collapse=\"true\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ntop100 <- df %>% \n        group_by(gender, year) %>% \n        top_n(100, wt=counts)\n```\n:::\n\n:::\n:::\n\n\n::: {#exm-}\nPlease draw the trend of `John`, `Harry`, `Mary` in `top100` by counts.\n\n::: {.callout-tip collapse=\"true\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nnamelist <- c('John', 'Harry', 'Mary')\ntop100 %>% \n    filter(name %in% namelist) %>% \n    ggplot() +\n        geom_line(mapping=aes(x=year, y=counts, color=name))\n```\n\n::: {.cell-output-display}\n![](intro_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n:::\n:::\n\n\n::: {#exm-}\nNow we would like to analyze the ending of names. Please get a `tibble` that contains the counts of ending letter per year per gender. We mainly focus on 1910, 1960 and 2010.\n\n::: {.callout-tip collapse=\"true\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n    filter(year %in% c(1910, 1960, 2010)) %>% \n    mutate(ending=str_sub(name, -1, -1), \n           year=as.factor(year)) %>% \n    group_by(gender, year, ending) %>% \n    summarise(ending_counts=sum(counts)) %>% \n    ggplot() +\n        geom_col(\n            mapping = aes(\n                x=ending, \n                y=ending_counts, \n                fill=year,\n                ), \n            position = \"dodge\",\n        ) +\n        facet_wrap(~gender, nrow=2)\n```\n\n::: {.cell-output-display}\n![](intro_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n:::\n:::\n\n\n::: {#exm-}\nPlease draw the line plot to show the trending of certain letters through years. Here we choose `d`, `n` and `y`.\n\n\n\n::: {.callout-tip collapse=\"true\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n    mutate(ending=str_sub(name, -1, -1)) %>% \n    group_by(year, ending) %>% \n    summarise(ending_counts=sum(counts)) %>% \n    filter(ending %in% c('d', 'n', 'y')) %>% \n    ggplot() +\n        geom_line(\n            mapping = aes(\n                x=year, \n                y=ending_counts, \n                color=ending\n            )\n        )\n```\n\n::: {.cell-output-display}\n![](intro_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n:::\n:::\n\n\n\n\n\n## References {.unnumbered}\n\n::: {#refs}\n:::\n",
    "supporting": [
      "intro_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}